Index: src/main/java/com/napier/sem/App.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.napier.sem;\r\nimport java.io.IOException;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\n\r\npublic class App\r\n{\r\n    /**\r\n     * Main function of the program\r\n     * @param args an array of command-line arguments for the application\r\n     */\r\n    public static void main(String[] args) throws IOException {\r\n        // Create new Application\r\n        App app = new App();\r\n\r\n        // Connect to database\r\n        if (args.length < 1)\r\n        {\r\n            app.connect(\"localhost:33060\", 0 );\r\n        }\r\n        else\r\n        {\r\n            app.connect(\"db:3306\", 30000);\r\n//            app.connect(args[0], Integer.parseInt(args[1]));\r\n        }\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////hmt\r\n        // 1. All the countries in the world organised by largest population to smallest.\r\n        ArrayList<Country> countries = app.countryworld();\r\n        // Print All the countries in the world organised by largest population to smallest.\r\n        app.printCountriesReport(countries);\r\n\r\n\r\n\r\n\r\n        // 2. All the countries in a continent organised by largest population to smallest.\r\n        countries = app.countrycontinent();\r\n        // Print All the countries in a continent organised by largest population to smallest.\r\n        app.printCountriesReport(countries);\r\n\r\n\r\n\r\n        // 3.  All the countries in a region organised by largest population to smallest.\r\n        countries = app.countryregion();\r\n        // Print All the countries in a region organised by largest population to smallest.\r\n        app.printCountriesReport(countries);\r\n        // Print Countries in the Region from largest population to smallest into markdown file\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n        // 4. The top N populated countries in the world where N is provided by the user.\r\n        countries = app.countrytopnworld();\r\n        // Print The top N populated countries in the world where N is provided by the user.\r\n        app.printCountriesReport(countries);\r\n\r\n        // 5.The top N populated countries in a continent where N is provided by the user.\r\n        countries = app.countrytopncontinent();\r\n        // Print The top N populated countries in a continent where N is provided by the user.\r\n        app.printCountriesReport(countries);\r\n\r\n\r\n\r\n        // 6. The top N populated countries in a region where N is provided by the user.\r\n        countries = app.countrytopnregion();\r\n        // Print Top populated Country in the region\r\n        app.printCountriesReport(countries);\r\n\r\n\r\n\r\n\r\n        ///////////////////////////////////////////////////////////\r\n        // 7. All the cities in the world organised by largest population to smallest.\r\n        ArrayList<City> cities = app.cityworld();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n\r\n\r\n\r\n        // 8.All the cities in a continent organised by largest population to smallest.\r\n        cities = app.citycontinent();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n        // 9. All the cities in a region organised by largest population to smallest.\r\n        cities = app.cityregion();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n        // 10. All the cities in a country organised by largest population to smallest.\r\n        cities = app.citycountry();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n        // 11. All the cities in a district organised by largest population to smallest.\r\n        cities = app.citydistrict();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n///////////////////////////////////////////////////////////////\r\n\r\n///////////////////////////////////////////////////////////\r\n        // 12.\tThe top N populated cities in the world where N is provided by the user.\r\n        cities = app.citytopnworld();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n        // 13.\tThe top N populated cities in a continent where N is provided by the user.\r\n        cities = app.citytopncontinent();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n        // 14.\tThe top N populated cities in a region where N is provided by the user.\r\n        cities = app.citytopnregion();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n        // 15.\tThe top N populated cities in a country where N is provided by the user.\r\n        cities = app.citytopncountry();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n        // 16.\tThe top N populated cities in a district where N is provided by the user.\r\n        cities = app.citytopndistrict();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n        // 17.\tAll the capital cities in the world organised by largest population to smallest.\r\n        ArrayList<Capital> cap_cities = app.capitalworld();\r\n        // print city data\r\n        app.printCapitalCityReport(cap_cities);\r\n\r\n\r\n\r\n        // 18.\tAll the capital cities in a continent organised by largest population to smallest.\r\n        cap_cities = app.capitalcontinent();\r\n        // print city data\r\n        app.printCapitalCityReport(cap_cities);\r\n\r\n\r\n        // 19.\tAll the capital cities in a region organised by largest to smallest.\r\n        cap_cities = app.capitalregion();\r\n        // print city data\r\n        app.printCapitalCityReport(cap_cities);\r\n\r\n\r\n        // 20.\tThe top N populated capital cities in the world where N is provided by the user.\r\n        cap_cities = app.capitaltopnworld();\r\n        // print city data\r\n        app.printCapitalCityReport(cap_cities);\r\n\r\n\r\n        // 21.\tThe top N populated capital cities in a continent where N is provided by the user.\r\n        cap_cities = app.capitaltopncontinent();\r\n        // print city data\r\n        app.printCapitalCityReport(cap_cities);\r\n\r\n\r\n        // 22.\tThe top N populated capital cities in a region where N is provided by the user.\r\n        cap_cities = app.capitaltopnregion();\r\n        // print city data\r\n        app.printCapitalCityReport(cap_cities);\r\n/////////////////////////////////////////////\r\n        // 23.\tThe population of people, people living in cities, and people not living in cities in each continent.\r\n        ArrayList<Population> populations = app.populationcitycontinent();\r\n        // print population data\r\n        app.printPopulationReport(populations);\r\n\r\n\r\n        // 24.\tThe population of people, people living in cities, and people not living in cities in each region.\r\n        populations = app.populationcityregion();\r\n        // print population data\r\n        app.printPopulationReport(populations);\r\n\r\n\r\n        //25.\tThe population of people, people living in cities, and people not living in cities in each country.\r\n        populations = app.populationcitycountry();\r\n        // print population data\r\n        app.printPopulationReport(populations);\r\n\r\n\r\n        // 26. Population in the world.\r\n        app.populationworld();\r\n        // get output from extracting total population in the world to put into markdown file\r\n        String world =  app.populationworld();\r\n        System.out.println(world);\r\n\r\n        // 27. Population in the Continent\r\n        app.populationcontinent(\"North America\");\r\n        // get output from extracting total population in the continent to put into markdown file\r\n        String continent =  app.populationcontinent(\"North America\");\r\n        System.out.println(continent);\r\n\r\n        // 28. Population in the Region\r\n        app.populationregion(\"British Islands\");\r\n        // get output from extracting total population in the region to put into markdown file\r\n        String region =  app.populationregion(\"British Islands\");\r\n        System.out.println(region);\r\n\r\n        // 29. Population in the Country\r\n        app.populationcountry(\"Myanmar\");\r\n        // get output from extracting total population in the country to put into markdown file\r\n        String country =  app.populationcountry(\"Myanmar\");\r\n        System.out.println(country);\r\n\r\n        // 30. Population in the District\r\n        app.populationdistrict(\"Texas\");\r\n        // get output from extracting total population in the district to put into markdown file\r\n        String district =  app.populationdistrict(\"Texas\");\r\n        System.out.println(district);\r\n\r\n        // 31. Population in the City\r\n        app.populationcity(\"Amsterdam\");\r\n        // get output from extracting total population in the city to put into markdown file\r\n        String city =  app.populationcity(\"Amsterdam\");\r\n        System.out.println(city);\r\n//////////////////////////////////////////////////////////\r\n\r\n        // 32. language spoken population\r\n        ArrayList<Language> languanges = app.languagepop();\r\n        // print language data\r\n        app.printLanguageReport(languanges);\r\n\r\n\r\n\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////\r\n        // Disconnect from database\r\n        app.disconnect();\r\n\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Connection to MySQL database.\r\n     */\r\n    private static Connection con = null;\r\n\r\n    /**\r\n     * Connect to the MySQL database.\r\n     */\r\n    public void connect(String location, int delay)\r\n    {\r\n        try\r\n        {\r\n            // Load Database driver\r\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\r\n        }\r\n        catch (ClassNotFoundException e)\r\n        {\r\n            System.out.println(\"Could not load SQL driver\");\r\n            System.exit(-1);\r\n        }\r\n\r\n        int retries = 10;\r\n        for (int i = 0; i < retries; ++i)\r\n        {\r\n            System.out.println(\"Connecting to database ...\");\r\n            try\r\n            {\r\n                Thread.sleep(delay);\r\n                con = DriverManager.getConnection(\"jdbc:mysql://\" + location + \"/world?\" +\r\n                        \"allowPublicKeyRetrieval=true&useSSL=false\", \"root\", \"thuta\");\r\n                System.out.println(\"Successfully connected\");\r\n                break;\r\n            } catch (SQLException sqle) {\r\n                System.out.println(\"Failed to connect to database attempt \" + i);\r\n                System.out.println(sqle.getMessage());\r\n            } catch (InterruptedException ie) {\r\n                System.out.println(\"Thread interrupted? Should not happen.\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the MySQL database.\r\n     */\r\n    public void disconnect()\r\n    {\r\n        if (con != null)\r\n        {\r\n            try\r\n            {\r\n                // Close connection\r\n                con.close();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                System.out.println(\"Error closing connection to database\");\r\n            }\r\n        }\r\n    }\r\n\r\n/////////////////////////////////////////////////////////////hmt\r\n\r\n    /**\r\n     1. All the countries in the world organised by largest population to smallest.\r\n     **/\r\n    public ArrayList<Country> countryworld()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            // Create string for SQL statement\r\n            String strSelect =\r\n                    \"SELECT country.Code, country.Name, country.Continent, country.Region, country.Population, city.Name FROM country INNER JOIN city on country.capital = city.ID ORDER BY country.Population DESC\";\r\n            // Execute SQL statement\r\n            ResultSet rset = stmt.executeQuery(strSelect);\r\n            // Extract countries data\r\n            ArrayList<Country> countries = new ArrayList<>();\r\n            while (rset.next())\r\n            {\r\n                Country coun = new Country();\r\n                coun.setCode(rset.getString(\"country.Code\"));\r\n                coun.setName(rset.getString(\"country.Name\"));\r\n                coun.setContinent(rset.getString(\"country.Continent\"));\r\n                coun.setRegion(rset.getString(\"country.Region\"));\r\n                coun.setPopulation(rset.getInt(\"country.Population\"));\r\n                coun.setCapital(rset.getString(\"city.Name\"));\r\n                countries.add(coun);\r\n            }\r\n            System.out.println(\"\\n1. All the countries in the world organised by largest population to smallest.\\n\");\r\n            return countries;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get country data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     2. All the countries in a continent organised by largest population to smallest.\r\n     **/\r\n    public ArrayList<Country> countrycontinent()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            String continent = \"'Asia'\";\r\n            // Create string for SQL statement\r\n            String strSelect =\r\n                    \"SELECT country.Code, country.Name, country.Continent, country.Region, country.Population, city.Name FROM country INNER JOIN city on country.capital = city.ID WHERE country.Continent=\"+ continent +\" ORDER BY country.Population DESC\";\r\n            // Execute SQL statement\r\n            ResultSet rset = stmt.executeQuery(strSelect);\r\n            // Extract countries data\r\n            ArrayList<Country> countries = new ArrayList<>();\r\n            while (rset.next())\r\n            {\r\n                Country coun = new Country();\r\n                coun.setCode(rset.getString(\"country.Code\"));\r\n                coun.setName(rset.getString(\"country.Name\"));\r\n                coun.setContinent(rset.getString(\"country.Continent\"));\r\n                coun.setRegion(rset.getString(\"country.Region\"));\r\n                coun.setPopulation(rset.getInt(\"country.Population\"));\r\n                coun.setCapital(rset.getString(\"city.Name\"));\r\n                countries.add(coun);\r\n            }\r\n            System.out.println(\"\\n2. All the countries in \"+continent+\" organised by largest population to smallest.\\n\");\r\n            return countries;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get country data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     3. All the countries in a region organised by largest population to smallest.\r\n     **/\r\n    public ArrayList<Country> countryregion()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            String region = \"'Central America'\";\r\n            // Create string for SQL statement\r\n            String strSelect =\r\n                    \"SELECT country.Code, country.Name, country.Continent, country.Region, country.Population, city.Name FROM country INNER JOIN city on country.capital = city.ID WHERE country.Region=\"+ region +\" ORDER BY country.Population DESC\";\r\n            // Execute SQL statement\r\n            ResultSet rset = stmt.executeQuery(strSelect);\r\n            // Extract countries data\r\n            ArrayList<Country> countries = new ArrayList<>();\r\n            while (rset.next())\r\n            {\r\n                Country coun = new Country();\r\n                coun.setCode(rset.getString(\"country.Code\"));\r\n                coun.setName(rset.getString(\"country.Name\"));\r\n                coun.setContinent(rset.getString(\"country.Continent\"));\r\n                coun.setRegion(rset.getString(\"country.Region\"));\r\n                coun.setPopulation(rset.getInt(\"country.Population\"));\r\n                coun.setCapital(rset.getString(\"city.Name\"));\r\n                countries.add(coun);\r\n            }\r\n            System.out.println(\"\\n3.All the countries in \"+region+\" organised by largest population to smallest.\\n\");\r\n            return countries;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get country data\");\r\n            return null;\r\n        }\r\n    }\r\n    /***\r\n     4. The top N populated countries in the world where N is provided by the user.\r\n     */\r\n    public ArrayList<Country> countrytopnworld()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            int limit = 15;       // for N in a list of Top \"N\" populated country in the world\r\n            // Create string for SQL statement\r\n            String strSelect =\r\n                    \"SELECT country.Code, country.Name, country.Continent, country.Region, country.Population, city.Name FROM country INNER JOIN city on country.capital = city.ID ORDER BY country.Population DESC LIMIT \"+ limit;\r\n            // Execute SQL statement\r\n            ResultSet rset = stmt.executeQuery(strSelect);\r\n            // Extract countries data\r\n            ArrayList<Country> countries = new ArrayList<>();\r\n            while (rset.next())\r\n            {\r\n                Country coun = new Country();\r\n                coun.setCode(rset.getString(\"country.Code\"));\r\n                coun.setName(rset.getString(\"country.Name\"));\r\n                coun.setContinent(rset.getString(\"country.Continent\"));\r\n                coun.setRegion(rset.getString(\"country.Region\"));\r\n                coun.setPopulation(rset.getInt(\"country.Population\"));\r\n                coun.setCapital(rset.getString(\"city.Name\"));\r\n                countries.add(coun);\r\n            }\r\n            System.out.println(\"\\n4. The top \" + limit + \" populated countries in the world where N is provided by the user.\\n\");\r\n            return countries;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get country data\");\r\n            return null;\r\n        }\r\n    }\r\n///////////////////////////////////////////////////\r\n\r\n///////////////////////////////////////////////////////////hah\r\n\r\n    /**\r\n     5.The top N populated countries in a continent where N is provided by the user.\r\n     */\r\n    public ArrayList<Country> countrytopncontinent()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            int limit = 15;       // for N in a list of Top \"N\" populated country in the world\r\n            String continent = \"'Asia'\";\r\n            // Create string for SQL statement\r\n            String strSelect =\r\n                    \"SELECT country.Code, country.Name, country.Continent, country.Region, country.Population, city.Name FROM country INNER JOIN city on country.capital = city.ID WHERE country.Continent=\"+ continent + \" ORDER BY country.Population DESC LIMIT \"+ limit;\r\n            // Execute SQL statement\r\n            ResultSet rset = stmt.executeQuery(strSelect);\r\n            // Extract countries data\r\n            ArrayList<Country> countries = new ArrayList<>();\r\n            while (rset.next())\r\n            {\r\n                Country coun = new Country();\r\n                coun.setCode(rset.getString(\"country.Code\"));\r\n                coun.setName(rset.getString(\"country.Name\"));\r\n                coun.setContinent(rset.getString(\"country.Continent\"));\r\n                coun.setRegion(rset.getString(\"country.Region\"));\r\n                coun.setPopulation(rset.getInt(\"country.Population\"));\r\n                coun.setCapital(rset.getString(\"city.Name\"));\r\n                countries.add(coun);\r\n            }\r\n            System.out.println(\"\\n5. The top \"+ limit +\" populated countries in \"+ continent+\" continent.\");\r\n            return countries;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get country data\");\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     6. The top N populated countries in a region where N is provided by the user.\r\n     */\r\n    public ArrayList<Country> countrytopnregion()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            int limit = 15;       // for N in a list of Top \"N\" populated country in the world\r\n            String region = \"'Southeast Asia'\";\r\n            // Create string for SQL statement\r\n            String strSelect =\r\n                    \"SELECT country.Code, country.Name, country.Continent, country.Region, country.Population, city.Name FROM country INNER JOIN city on country.capital = city.ID WHERE country.Region=\"+ region + \" ORDER BY country.Population DESC LIMIT \"+limit;\r\n            // Execute SQL statement\r\n            ResultSet rset = stmt.executeQuery(strSelect);\r\n            // Extract countries data\r\n            ArrayList<Country> countries = new ArrayList<>();\r\n            while (rset.next())\r\n            {\r\n                Country coun = new Country();\r\n                coun.setCode(rset.getString(\"country.Code\"));\r\n                coun.setName(rset.getString(\"country.Name\"));\r\n                coun.setContinent(rset.getString(\"country.Continent\"));\r\n                coun.setRegion(rset.getString(\"country.Region\"));\r\n                coun.setPopulation(rset.getInt(\"country.Population\"));\r\n                coun.setCapital(rset.getString(\"city.Name\"));\r\n                countries.add(coun);\r\n            }\r\n            System.out.println(\"\\n6. The top \"+ limit +\" populated countries in \"+ region+\" region.\");\r\n            return countries;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get country data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     7. All the cities in the world organised by largest population to smallest.\r\n     **/\r\n    public ArrayList<City> cityworld()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on city.CountryCode=country.Code ORDER BY city.Population DESC;\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n7. All the cities in the world organised by largest population to smallest.\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get Cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////////ttkk\r\n    /**\r\n     8. All the cities in a continent organised by largest population to smallest.\r\n     **/\r\n    public ArrayList<City> citycontinent()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n            String continent = \"'Asia'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on city.CountryCode=country.Code WHERE country.Continent=\"+ continent  +\" ORDER BY city.Population DESC;\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n8. All the cities in\" +continent+\" organised by largest population to smallest.\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get Cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     9. All the cities in a region organised by largest population to smallest.\r\n     **/\r\n\r\n    public ArrayList<City> cityregion()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n            String region = \"'Southeast Asia'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on city.CountryCode=country.Code WHERE country.Region=\"+region+\" ORDER BY city.Population DESC;\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n9. All the cities in \"+region+\" organised by largest population to smallest. \");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get Cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     10.All the cities in a country organised by largest population to smallest.\r\n     **/\r\n\r\n\r\n    public ArrayList<City> citycountry()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n            String country = \"'Myanmar'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on city.CountryCode=country.Code WHERE country.name=\"+country+\" ORDER BY city.Population DESC;\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n10. All the cities in \"+country+\" organised by largest population to smallest. country sorted by largest to smallest population\\n\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get Cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     11. All the cities in a district organised by largest population to smallest.\r\n     **/\r\n    public ArrayList<City> citydistrict()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n            String district = \"'Florida'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on city.CountryCode=country.Code WHERE city.District=\"+district+\" ORDER BY city.Population DESC;\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n11. All the cities in \"+district+\" organised by largest population to smallest. \\n\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get Cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n///////////////////////////////////////////////////////////////\r\n    /***\r\n     12.\tThe top N populated cities in the world where N is provided by the user.\r\n     */\r\n    public ArrayList<City> citytopnworld()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population \"\r\n                            + \"FROM city INNER JOIN country on city.CountryCode=country.Code \"\r\n                            + \"ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\12. The top \" + limit + \" populated cities in the world. \\n\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     13.\tThe top N populated cities in a continent where N is provided by the user.\r\n     */\r\n    public ArrayList<City> citytopncontinent()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;\r\n            String continent = \"Oceania\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population \"\r\n                            + \"FROM city INNER JOIN country on city.CountryCode=country.Code \"\r\n                            + \"WHERE country.Continent='\" + continent\r\n                            + \"' ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n13. The top \" + limit + \" populated cities in \" + continent +\" continent\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     14.\tThe top N populated cities in a region where N is provided by the user.\r\n     */\r\n    public ArrayList<City> citytopnregion()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;\r\n            String region= \"Western Europe\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population \"\r\n                            + \"FROM city INNER JOIN country on city.CountryCode=country.Code \"\r\n                            + \"WHERE country.Region='\" + region\r\n                            + \"' ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n14.\\tThe top \" + limit + \" populated cities in \" + region +\" region.\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     15.\tThe top N populated cities in a country where N is provided by the user.\r\n     */\r\n    public ArrayList<City> citytopncountry()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;\r\n            String country= \"France\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population \"\r\n                            + \"FROM city INNER JOIN country on city.CountryCode=country.Code \"\r\n                            + \"WHERE country.Name='\" + country\r\n                            + \"' ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n15. The top \" + limit + \"  populated cities in \" + country +\" country.\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     16.\tThe top N populated cities in a district where N is provided by the user.\r\n     */\r\n    public ArrayList<City> citytopndistrict()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;\r\n            String district = \"California\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population \"\r\n                            + \"FROM city INNER JOIN country on city.CountryCode=country.Code \"\r\n                            + \"WHERE city.District='\" + district\r\n                            + \"' ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n16. The top \" + limit + \" populated cities in \" + district +\" district.\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     17.\tAll the capital cities in the world organised by largest population to smallest.\r\n     **/\r\n\r\n    public ArrayList<Capital> capitalworld()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on country.capital = city.ID ORDER BY Population DESC;\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<Capital> cap_cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                Capital ca = new Capital();\r\n                ca.setName(result.getString(\"city.Name\"));\r\n                ca.setCountry(result.getString(\"country.Name\"));\r\n                ca.setDistrict(result.getString(\"city.District\"));\r\n                ca.setPopulation(result.getInt(\"city.Population\"));\r\n                cap_cities.add(ca);\r\n            }\r\n            System.out.println(\"\\n17. All the capital cities in the world organised by largest population to smallest.\");\r\n            return cap_cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get capital cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     18.\tAll the capital cities in a continent organised by largest population to smallest.\r\n     **/\r\n\r\n    public ArrayList<Capital> capitalcontinent()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n            String continent = \"'Asia'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on country.capital = city.ID WHERE country.Continent=\" + continent +\" ORDER BY Population DESC;\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<Capital> cap_cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                Capital ca = new Capital();\r\n                ca.setName(result.getString(\"city.Name\"));\r\n                ca.setCountry(result.getString(\"country.Name\"));\r\n                ca.setDistrict(result.getString(\"city.District\"));\r\n                ca.setPopulation(result.getInt(\"city.Population\"));\r\n                cap_cities.add(ca);\r\n            }\r\n            System.out.println(\"\\n18. All the capital cities in \"+continent+\" continent organised by largest population to smallest.\");\r\n            return cap_cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get capital cities data\");\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     19.\tAll the capital cities in a region organised by largest to smallest.\r\n     **/\r\n\r\n    public ArrayList<Capital> capitalregion()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n            String region = \"'Middle East'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on country.capital = city.ID WHERE country.Region=\"+region+\" ORDER BY Population DESC; \";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<Capital> cap_cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                Capital ca = new Capital();\r\n                ca.setName(result.getString(\"city.Name\"));\r\n                ca.setCountry(result.getString(\"country.Name\"));\r\n                ca.setDistrict(result.getString(\"city.District\"));\r\n                ca.setPopulation(result.getInt(\"city.Population\"));\r\n                cap_cities.add(ca);\r\n            }\r\n            System.out.println(\"\\n19. All the capital cities in \"+region+\" region organised by largest to smallest. \");\r\n            return cap_cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get capital cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     20.\tThe top N populated capital cities in the world where N is provided by the user.\r\n     */\r\n    public ArrayList<Capital> capitaltopnworld()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;       // for N in a list of Top \"N\" populated cities in the world\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on country.capital = city.ID ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<Capital> cap_cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                Capital ca = new Capital();\r\n                ca.setName(result.getString(\"city.Name\"));\r\n                ca.setCountry(result.getString(\"country.Name\"));\r\n                ca.setDistrict(result.getString(\"city.District\"));\r\n                ca.setPopulation(result.getInt(\"city.Population\"));\r\n                cap_cities.add(ca);\r\n            }\r\n            System.out.println(\"\\n20. The top \" + limit + \" populated capital cities in the world. \");\r\n            return cap_cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated capital cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     21.\tThe top N populated capital cities in a continent where N is provided by the user.\r\n     */\r\n    public ArrayList<Capital> capitaltopncontinent()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;       // for N in a list of Top \"N\" populated cities in the world\r\n            String continent =\"'Asia'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on country.capital = city.ID WHERE country.Continent=\"+continent+\" ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<Capital> cap_cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                Capital ca = new Capital();\r\n                ca.setName(result.getString(\"city.Name\"));\r\n                ca.setCountry(result.getString(\"country.Name\"));\r\n                ca.setDistrict(result.getString(\"city.District\"));\r\n                ca.setPopulation(result.getInt(\"city.Population\"));\r\n                cap_cities.add(ca);\r\n            }\r\n            System.out.println(\"\\n21. The top  \" + limit + \" populated capital cities in \"+continent+\" continent.\");\r\n            return cap_cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated capital cities data \");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     22.\tThe top N populated capital cities in a region where N is provided by the user.\r\n     */\r\n    public ArrayList<Capital> capitaltopnregion()\r\n    {\r\n        try {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;       // for N in a list of Top \"N\" populated cities in the world\r\n            String region = \"'Eastern Asia'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on country.capital = city.ID WHERE country.Region=\" + region + \" ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<Capital> cap_cities = new ArrayList<>();\r\n            while (result.next()) {\r\n                Capital ca = new Capital();\r\n                ca.setName(result.getString(\"city.Name\"));\r\n                ca.setCountry(result.getString(\"country.Name\"));\r\n                ca.setDistrict(result.getString(\"city.District\"));\r\n                ca.setPopulation(result.getInt(\"city.Population\"));\r\n                cap_cities.add(ca);\r\n            }\r\n            System.out.println(\"\\n22. The top \" + limit + \" populated capital cities in  \" + region + \" region.\");\r\n            return cap_cities;\r\n        } catch (Exception e) {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated capital cities data \");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /////////////////////////////////////////////////////////////\r\n    /***\r\n     23.\tThe population of people, people living in cities, and people not living in cities in each continent.\r\n     */\r\n    public ArrayList<Population> populationcitycontinent()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt_1 = con.createStatement();  // Create a first SQL statement\r\n            // Create string for the first SQL statement\r\n            String getPopulationReports_Country = \"SELECT Continent, SUM(Population) FROM country \"\r\n                    + \"GROUP BY Continent HAVING SUM(Population)>0 ORDER BY Continent DESC;\";\r\n            // Execute the first SQL statement\r\n            ResultSet result_1 = stmt_1.executeQuery(getPopulationReports_Country);\r\n\r\n            Statement stmt_2 = con.createStatement();  // Create a second SQL statement\r\n            // Create string for the second SQL statement\r\n            String getPopulationReports_City = \"SELECT country.Continent, SUM(city.Population) FROM city \"\r\n                    + \"INNER JOIN country ON city.CountryCode=country.Code \"\r\n                    + \"GROUP BY country.Continent ORDER BY country.Continent DESC;\";\r\n            // Execute the second SQL statement\r\n            ResultSet result_2 = stmt_2.executeQuery(getPopulationReports_City);\r\n\r\n            // Extract total population data\r\n            ArrayList<Population> populations = new ArrayList<>();\r\n            while (result_1.next() & result_2.next())\r\n            {\r\n                Population pop = new Population();\r\n\r\n                pop.setName(result_1.getString(\"Continent\"));\r\n                pop.setTotalpopulation(result_1.getLong(\"SUM(Population)\"));\r\n\r\n                long citypop = result_2.getLong(\"SUM(city.Population)\");\r\n                Float citypercentage = (float) ((citypop * 100.00) / pop.getTotalpopulation());\r\n                pop.setCitypopulation(citypop + \"(\" + String.format(\"%.2f%%\", citypercentage) + \")\");\r\n\r\n                long notcitypop = pop.getTotalpopulation() - citypop;\r\n                Float notcitypercentage = (float) ((notcitypop * 100.00) / pop.getTotalpopulation());\r\n                pop.setNotcitypopulation(notcitypop + \"(\" + String.format(\"%.2f%%\", notcitypercentage) + \")\");\r\n\r\n                populations.add(pop);\r\n            }\r\n            System.out.println(\"\\n23. The population of people, people living in cities, and people not living in cities in each continent.\");\r\n            return populations;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of the population of people, people living in cities, and people not living in cities in each continent\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     24.\tThe population of people, people living in cities, and people not living in cities in each region.\r\n     */\r\n    public ArrayList<Population> populationcityregion()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt_1 = con.createStatement();  // Create a first SQL statement\r\n            // Create string for the first SQL statement\r\n            String getPopulationReports_Country = \"SELECT Region, SUM(Population) FROM country \"\r\n                    + \"GROUP BY Region HAVING SUM(Population)>0 ORDER BY Region DESC;\";\r\n            // Execute the first SQL statement\r\n            ResultSet result_1 = stmt_1.executeQuery(getPopulationReports_Country);\r\n\r\n            Statement stmt_2 = con.createStatement();  // Create a second SQL statement\r\n            // Create string for the second SQL statement\r\n            String getPopulationReports_City = \"SELECT country.Region, SUM(city.Population) FROM city \"\r\n                    + \"INNER JOIN country ON city.CountryCode=country.Code \"\r\n                    + \"GROUP BY country.Region ORDER BY country.Region DESC;\";\r\n            // Execute the second SQL statement\r\n            ResultSet result_2 = stmt_2.executeQuery(getPopulationReports_City);\r\n\r\n            // Extract total population data\r\n            ArrayList<Population> populations = new ArrayList<>();\r\n            while (result_1.next() & result_2.next())\r\n            {\r\n                Population pop = new Population();\r\n\r\n                pop.setName(result_1.getString(\"Region\"));\r\n                pop.setTotalpopulation(result_1.getLong(\"SUM(Population)\"));\r\n                long citypop = result_2.getLong(\"SUM(city.Population)\");\r\n                Float citypercentage = (float) ((citypop * 100.00) / pop.getTotalpopulation());\r\n                pop.setCitypopulation(citypop + \"(\" + String.format(\"%.2f%%\", citypercentage) + \")\");\r\n                long notcitypop = pop.getTotalpopulation() - citypop;\r\n                Float notcitypercentage = (float) ((notcitypop * 100.00) / pop.getTotalpopulation());\r\n                pop.setNotcitypopulation(notcitypop + \"(\" + String.format(\"%.2f%%\", notcitypercentage) + \")\");\r\n                populations.add(pop);\r\n            }\r\n            System.out.println(\"\\n24. The population of people, people living in cities, and people not living in cities in each region.\");\r\n            return populations;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of the population of people, people living in cities, and people not living in cities in each region.\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /***\r\n     25.\tThe population of people, people living in cities, and people not living in cities in each country.\r\n     */\r\n    public ArrayList<Population> populationcitycountry()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt_1 = con.createStatement();  // Create a first SQL statement\r\n            // Create string for the first SQL statement\r\n            String getPopulationReports_Country = \"SELECT Name, Population FROM country \"\r\n                    + \"HAVING Population>0 ORDER BY Name ASC;\";\r\n            // Execute the first SQL statement\r\n            ResultSet result_1 = stmt_1.executeQuery(getPopulationReports_Country);\r\n\r\n            Statement stmt_2 = con.createStatement();  // Create a second SQL statement\r\n            // Create string for the second SQL statement\r\n            String getPopulationReports_City = \"SELECT country.Name, SUM(city.Population) FROM city \"\r\n                    + \"INNER JOIN country ON city.CountryCode=country.Code \"\r\n                    + \"GROUP BY country.Name ORDER BY country.Name ASC;\";\r\n            // Execute the second SQL statement\r\n            ResultSet result_2 = stmt_2.executeQuery(getPopulationReports_City);\r\n\r\n            // Extract total population data\r\n            ArrayList<Population> populations = new ArrayList<>();\r\n            while (result_1.next() & result_2.next())\r\n            {\r\n                Population pop = new Population();\r\n\r\n                pop.setName(result_1.getString(\"Name\"));\r\n                pop.setTotalpopulation(result_1.getLong(\"Population\"));\r\n\r\n                long citypop = result_2.getLong(\"SUM(city.Population)\");\r\n                float citypercentage;\r\n                long notcitypop;\r\n                float notcitypercentage;\r\n\r\n                if (pop.getTotalpopulation() > citypop) {\r\n                    citypercentage = (float) ((citypop * 100.00) / pop.getTotalpopulation());\r\n                    notcitypop = pop.getTotalpopulation() - citypop;\r\n                    notcitypercentage = (float) ((notcitypop * 100.00) / pop.getTotalpopulation());\r\n                }\r\n                else{\r\n                    citypercentage = (float) ((citypop * 100.00) / citypop);\r\n                    notcitypop = citypop - pop.getTotalpopulation();\r\n                    notcitypercentage = (float) ((notcitypop * 100.00) / citypop);\r\n                    citypercentage = citypercentage - notcitypercentage;\r\n                }\r\n                pop.setCitypopulation(citypop + \"(\" + String.format(\"%.2f%%\", citypercentage) + \")\");\r\n                pop.setNotcitypopulation(notcitypop + \"(\" + String.format(\"%.2f%%\", notcitypercentage) + \")\");\r\n\r\n                populations.add(pop);\r\n            }\r\n            System.out.println(\"\\n25. The population of people, people living in cities, and people not living in cities in each country.\");\r\n            return populations;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of the population of people, people living in cities, and people not living in cities in each country.\");\r\n            return null;\r\n        }\r\n    }\r\n////////////////////////////////////////////////////////////////\r\n    /***\r\n     26.\tPopulation in the world.\r\n     */\r\n    public String populationworld()\r\n    {\r\n        String popp = \"\";\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            // Create string for SQL statement\r\n            String strSelect = \"SELECT SUM(Population) FROM country;\";\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(strSelect);\r\n            // Extract population\r\n            Population pop = new Population();\r\n            while (result.next())\r\n            {\r\n                pop.setTotalpopulation(result.getLong(\"SUM(Population)\"));\r\n            }\r\n            popp = \"\\n26. Population in the world is \" + pop.getTotalpopulation() + \".\";\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get population data\");\r\n        }\r\n        return popp;\r\n    }\r\n\r\n    /***\r\n     27.\tPopulation in the Continent\r\n     */\r\n    public String populationcontinent(String continent)\r\n    {\r\n        String popp = \"\";\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            // Create string for SQL statement\r\n            String strSelect = \"SELECT SUM(Population) FROM country WHERE Continent='\"+continent+\"'\";\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(strSelect);\r\n            // Extract population\r\n            Population pop = new Population();\r\n            while (result.next())\r\n            {\r\n                pop.setTotalpopulation(result.getLong(\"SUM(Population)\"));\r\n            }\r\n\r\n            popp = \"\\n27. Population in \" + continent + \" Continent is \" + pop.getTotalpopulation() +\".\";\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get population data\");\r\n        }\r\n        return popp;\r\n    }\r\n    /***\r\n     28.\tPopulation in the Region\r\n     */\r\n    public String populationregion(String region) {\r\n        String popp = \"\";\r\n        try {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            // Create string for SQL statement\r\n            String strSelect = \"SELECT SUM(Population) FROM country WHERE Region='\" + region + \"'\";\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(strSelect);\r\n            // Extract population\r\n            Population pop = new Population();\r\n            while (result.next()) {\r\n                pop.setTotalpopulation(result.getLong(\"SUM(Population)\"));\r\n            }\r\n\r\n            popp = \"\\n28. Population in \" + region + \" Region is \" + pop.getTotalpopulation() + \".\";\r\n        } catch (Exception e) {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get population data\");\r\n        }\r\n        return popp;\r\n    }\r\n\r\n    /***\r\n     29.\tPopulation in the Country\r\n     */\r\n    public String populationcountry(String country)\r\n    {\r\n        String popp = \"\";\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            // Create string for SQL statement\r\n            String strSelect = \"SELECT SUM(Population) FROM country WHERE Name='\"+country+\"'\";\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(strSelect);\r\n            // Extract population\r\n            Population pop = new Population();\r\n            while (result.next())\r\n            {\r\n                pop.setTotalpopulation(result.getLong(\"SUM(Population)\"));\r\n            }\r\n\r\n            popp = \"\\n29. Population in \" + country + \" Country is \" + pop.getTotalpopulation() + \".\";\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get population data\");\r\n        }\r\n        return popp;\r\n    }\r\n\r\n    /***\r\n     30.\tPopulation in the District\r\n     */\r\n    public String populationdistrict(String district)\r\n    {\r\n        String popp = \"\";\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            // Create string for SQL statement\r\n            String strSelect = \"SELECT SUM(Population) FROM city WHERE District='\"+district+\"'\";\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(strSelect);\r\n            // Extract population\r\n            Population pop = new Population();\r\n            while (result.next())\r\n            {\r\n                pop.setTotalpopulation(result.getLong(\"SUM(Population)\"));\r\n            }\r\n\r\n            popp = \"\\n30. Population in \" + district + \" District is \" + pop.getTotalpopulation() + \".\";\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get population data\");\r\n        }\r\n        return popp;\r\n    }\r\n\r\n    /***\r\n     31.\tPopulation in the City\r\n     */\r\n    public String populationcity(String city)\r\n    {\r\n        String popp = \"\";\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            // Create string for SQL statement\r\n            String strSelect = \"SELECT Population FROM city WHERE Name='\"+city+\"'\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(strSelect);\r\n            // Extract population\r\n            Population pop = new Population();\r\n            while (result.next())\r\n            {\r\n                pop.setTotalpopulation(result.getLong(\"Population\"));\r\n            }\r\n\r\n            popp = \"\\n31. Population in \" + city + \" City is \" + pop.getTotalpopulation() + \".\";\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get population data\");\r\n        }\r\n        return popp;\r\n    }\r\n\r\n\r\n    /**\r\n     * 32. languages from greatest number to smallest, including the percentage of the world population\r\n     */\r\n    public ArrayList<Language> languagepop(){\r\n        System.out.println(\"\\n32. Population of people who uses certain languages\\n\");\r\n        try\r\n        {\r\n            Statement stmt_1 = con.createStatement();  // Create a first SQL statement\r\n            // Create string for the first SQL statement\r\n            String getPeopleSpeakLanguage = \"SELECT countrylanguage.Language, Sum((countrylanguage.Percentage/100)*country.Population) as totalpopulation FROM countrylanguage, country WHERE country.Code = countrylanguage.CountryCode and countrylanguage.Language IN ('Chinese', 'English', 'Hindi','Spanish','Arabic' ) GROUP BY countrylanguage.Language  ORDER BY totalpopulation desc\";\r\n            // Execute the first SQL statement\r\n            ResultSet result_1 = stmt_1.executeQuery(getPeopleSpeakLanguage);\r\n\r\n            Statement stmt_2 = con.createStatement();  // Create a second SQL statement\r\n            // Create string for the second SQL statement\r\n            String getWorldPopulation = \"select Sum(Population) as worldpopulation from country;\";\r\n            // Execute the second SQL statement\r\n            ResultSet result_2 = stmt_2.executeQuery(getWorldPopulation);\r\n\r\n            ArrayList<Language> language = new ArrayList<>();\r\n\r\n            float worldpopulation = 0;\r\n\r\n            while (result_2.next()){\r\n                worldpopulation = result_2.getLong(\"worldpopulation\");\r\n            }\r\n\r\n            while (result_1.next()) {\r\n\r\n                // Calculate percentage of people who speak a language in the world\r\n                long languagenum = result_1.getLong(\"totalpopulation\");\r\n\r\n                float percent = ((float)languagenum / worldpopulation) * (float)(100.00);\r\n\r\n                Language langu = new Language();\r\n                langu.setName(result_1.getString(\"countrylanguage.Language\"));\r\n                langu.setPopulation(result_1.getLong(\"totalpopulation\"));\r\n                langu.setPercentage(percent);\r\n\r\n                language.add(langu);\r\n\r\n            }\r\n\r\n\r\n            return language;\r\n\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get population of speakers\");\r\n            return null;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //////////////////////////////////////////////////////////\r\n    // out put and print files for country\r\n    public void printCountriesReport(ArrayList<Country> countries)\r\n    {\r\n        // Check Countries is not null\r\n        if (countries == null)\r\n        {\r\n            System.out.println(\"No Countries\");\r\n            return;\r\n        }\r\n        // Print header\r\n        System.out.printf(\"%-5s %-15s %-20s %-20s %-20s %-20s%n\\n\", \"Code\", \"Name\", \"Continent\", \"Region\", \"Population\", \"Capital \");\r\n//        System.out.println(\"\\n\");\r\n\r\n        // Check Country is not empty\r\n        if (!countries.isEmpty())\r\n        {\r\n            // Loop over all countries in the list\r\n            for (Country coun : countries)\r\n            {\r\n                // Check Country contain null\r\n                if (coun == null){\r\n                    continue;}\r\n                String country_string =\r\n                        String.format(\"%-5s %-15s %-20s %-20s %-20s %-20s\",\r\n                                coun.getCode(), coun.getName(), coun.getContinent(), coun.getRegion(), coun.getPopulation(), coun.getCapital());\r\n                System.out.println(country_string);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            String country_string = \"Country Report List is empty\";\r\n            System.out.println(country_string);\r\n        }\r\n    }\r\n\r\n\r\n/////////////////////////////////////////////////////////////\r\n// out put and print files for city\r\n\r\n\r\n    public void printCitiesReport(ArrayList<City> cities)\r\n    {\r\n        // Check cities is not null\r\n        if (cities == null)\r\n        {\r\n            System.out.println(\"No cities\");\r\n            return;\r\n        }\r\n        // Print header\r\n        System.out.printf(\"%-25s %-25s %-25s %-25s%n\\n\", \"City Name\", \"Country Name\", \"District\", \"Population \");\r\n//        System.out.println(\"\\n\");\r\n\r\n        // Check City is not empty\r\n        if (!cities.isEmpty())\r\n        {\r\n            // Loop over all cities in the list\r\n            for (City city : cities) {\r\n                // Check City contain null\r\n                if (city == null){\r\n                    continue;}\r\n                String city_string =\r\n                        String.format(\"%-25s %-25s %-25s %-25s\",\r\n                                city.getName(), city.getCountry(), city.getDistrict(), city.getPopulation());\r\n                System.out.println(city_string);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            String city_string = \"City Report List is empty\";\r\n            System.out.println(city_string);\r\n        }\r\n    }\r\n////////////////////////////////////////////////////////////////\r\n// out put and print files for capital\r\n    public void printCapitalCityReport(ArrayList<Capital> capitalcities)\r\n    {\r\n        // Check capital cities is not null\r\n        if (capitalcities == null)\r\n        {\r\n            System.out.println(\"No capital cities\");\r\n            return;\r\n        }\r\n        // Print header\r\n        System.out.printf(\"%-25s %-25s %-25s %-25s%n\\n\", \"City Name\", \"Country Name\", \"District\", \"Population\");\r\n\r\n        // Check Capital City is not empty\r\n        if (!capitalcities.isEmpty())\r\n        {\r\n            // Loop over all capital cities in the list\r\n            for (Capital city : capitalcities) {\r\n                // Check Capital City contain null\r\n                if (city == null){\r\n                    continue;}\r\n                String city_string =\r\n                        String.format(\"%-25s %-25s %-25s %-25s\",\r\n                                city.getName(), city.getCountry(), city.getDistrict(), city.getPopulation());\r\n                System.out.println(city_string);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            String city_string = \"Capital City Report List is empty\";\r\n            System.out.println(city_string);\r\n        }\r\n    }\r\n\r\n///////////////////////////////////////////////////////////\r\n// out put and print files for population\r\n    public void printPopulationReport(ArrayList<Population> populations)\r\n    {\r\n        // Check populations is not null\r\n        if (populations == null)\r\n        {\r\n            System.out.println(\"No population for given data.\");\r\n            return;\r\n        }\r\n\r\n        // Print header\r\n        System.out.printf(\"%-25s %-25s %-25s %-25s%n\\n\", \"Place\", \"Total Population\", \"Population of City\", \"Population not from City\");\r\n\r\n\r\n        // Check populations is not empty\r\n        if (!populations.isEmpty())\r\n        {\r\n            // Loop over all cities in the list\r\n            for (Population population : populations) {\r\n                // Check population contain null\r\n                if (population == null){\r\n                    continue;}\r\n                String population_string =\r\n                        String.format(\"%-25s %-25s %-25s %-25s\",\r\n                                population.getName(), population.getTotalpopulation(), population.getCitypopulation(), population.getNotcitypopulation());\r\n\r\n                System.out.println(population_string);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            String population_string = \"Population Report List is empty\";\r\n            System.out.println(population_string);\r\n        }\r\n    }\r\n\r\n    ///Output for Language\r\n    public void printLanguageReport(ArrayList<Language> language)\r\n    {\r\n        // Check data is not null\r\n        if (language == null)\r\n        {\r\n            System.out.println(\"No Data\");\r\n            return;\r\n        }\r\n        // Print header\r\n        System.out.printf(\"%-30s %-30s %-30s%n\\n\",\"Language\",\"Population\",\"Percentage\");\r\n\r\n\r\n        // Check Country is not empty\r\n        if (!language.isEmpty())\r\n        {\r\n            // Loop over all countries in the list\r\n            for (Language langu : language)\r\n            {\r\n                // Check Country contain null\r\n                if (langu == null){\r\n                    continue;}\r\n                String lan_string =\r\n                        String.format(\"%-30s %-30s %-30s%n\",\r\n                                langu.getName(),langu.getPopulation(),String.format(\"%.2f%%\", langu.getPercentage()));\r\n                System.out.println(lan_string);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            String country_string = \"Country Report List is empty\";\r\n            System.out.println(country_string);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/napier/sem/App.java b/src/main/java/com/napier/sem/App.java
--- a/src/main/java/com/napier/sem/App.java	(revision 92abf6093810c119dcb6218e008338397bfbb1d3)
+++ b/src/main/java/com/napier/sem/App.java	(date 1672943272549)
@@ -791,7 +791,7 @@
                 actiy.setPopulation(result.getInt("city.Population"));
                 cities.add(actiy);
             }
-            System.out.println("\12. The top " + limit + " populated cities in the world. \n");
+            System.out.println("\n12. The top " + limit + " populated cities in the world. \n");
             return cities;
         }
         catch (Exception e)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"d33e9b68-162c-4bca-b042-b3073ce8772f\" name=\"Changes\" comment=\"ss table\">\r\n      <change afterPath=\"$PROJECT_DIR$/screenshot/ss-1.PNG\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/screenshot/ss-2.PNG\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/screenshot/ss-3.PNG\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/screenshot/ss-4.PNG\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/screenshot/ss-5.PNG\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/README.md\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/README.md\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"CodeStyleSettingsInfer\">\r\n    <option name=\"done\" value=\"true\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Pull.Settings\">\r\n    <option name=\"OPTIONS\">\r\n      <set>\r\n        <option value=\"REBASE\" />\r\n      </set>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"ROOT_SYNC\" value=\"DONT_SYNC\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectCodeStyleSettingsMigration\">\r\n    <option name=\"version\" value=\"2\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2IdROKtgk3V6PNjWcss8AItn9dM\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/ASUS/IdeaProjects/Coursework/seMethods/sem8/screenshot&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.3754889&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;DatabaseDriversLRU&quot;: [\r\n      &quot;mysql&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\ASUS\\IdeaProjects\\Coursework\\seMethods\\sem8\\screenshot\" />\r\n      <recent name=\"C:\\Users\\ASUS\\IdeaProjects\\Coursework\\seMethods\\sem8\\use-cases\" />\r\n      <recent name=\"C:\\Users\\user\\IdeaProjects\\sem\\use-cases\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\user\\IdeaProjects\\sem\\db\" />\r\n      <recent name=\"C:\\Users\\ASUS\\IdeaProjects\\Coursework\\seMethods\\sem1\\db\" />\r\n      <recent name=\"C:\\Users\\ASUS\\IdeaProjects\\Coursework\\seMethods\\sem1\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Docker.docker-compose.yml: Compose Deployment\">\r\n    <configuration name=\"App\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.napier.sem.App\" />\r\n      <module name=\"seMethods\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.napier.sem.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"IntegrationTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"seMethods\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.napier.sem.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"com.napier.sem\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.napier.sem.IntegrationTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"UnitTests\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"seMethods\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.napier.sem.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"com.napier.sem\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.napier.sem.UnitTests\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"seMethods [deploy] (1)\" type=\"MavenRunConfiguration\" factoryName=\"Maven\">\r\n      <target name=\"app\" />\r\n      <MavenSettings>\r\n        <option name=\"myGeneralSettings\" />\r\n        <option name=\"myRunnerSettings\" />\r\n        <option name=\"myRunnerParameters\">\r\n          <MavenRunnerParameters>\r\n            <option name=\"profiles\">\r\n              <set />\r\n            </option>\r\n            <option name=\"goals\">\r\n              <list>\r\n                <option value=\"deploy\" />\r\n              </list>\r\n            </option>\r\n            <option name=\"pomFileName\" value=\"pox.xml\" />\r\n            <option name=\"profilesMap\">\r\n              <map />\r\n            </option>\r\n            <option name=\"resolveToWorkspace\" value=\"false\" />\r\n            <option name=\"workingDirPath\" value=\"$PROJECT_DIR$\" />\r\n          </MavenRunnerParameters>\r\n        </option>\r\n      </MavenSettings>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"seMethods [deploy] (2)\" type=\"MavenRunConfiguration\" factoryName=\"Maven\">\r\n      <MavenSettings>\r\n        <option name=\"myGeneralSettings\" />\r\n        <option name=\"myRunnerSettings\" />\r\n        <option name=\"myRunnerParameters\">\r\n          <MavenRunnerParameters>\r\n            <option name=\"profiles\">\r\n              <set />\r\n            </option>\r\n            <option name=\"goals\">\r\n              <list>\r\n                <option value=\"deploy\" />\r\n              </list>\r\n            </option>\r\n            <option name=\"pomFileName\" value=\"dockercompose.yml\" />\r\n            <option name=\"profilesMap\">\r\n              <map />\r\n            </option>\r\n            <option name=\"resolveToWorkspace\" value=\"false\" />\r\n            <option name=\"workingDirPath\" value=\"$PROJECT_DIR$\" />\r\n          </MavenRunnerParameters>\r\n        </option>\r\n      </MavenSettings>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"seMethods [deploy] (3)\" type=\"MavenRunConfiguration\" factoryName=\"Maven\">\r\n      <MavenSettings>\r\n        <option name=\"myGeneralSettings\" />\r\n        <option name=\"myRunnerSettings\" />\r\n        <option name=\"myRunnerParameters\">\r\n          <MavenRunnerParameters>\r\n            <option name=\"profiles\">\r\n              <set />\r\n            </option>\r\n            <option name=\"goals\">\r\n              <list>\r\n                <option value=\"deploy\" />\r\n              </list>\r\n            </option>\r\n            <option name=\"pomFileName\" value=\"pom.xml\" />\r\n            <option name=\"profilesMap\">\r\n              <map />\r\n            </option>\r\n            <option name=\"resolveToWorkspace\" value=\"false\" />\r\n            <option name=\"workingDirPath\" value=\"$PROJECT_DIR$\" />\r\n          </MavenRunnerParameters>\r\n        </option>\r\n      </MavenSettings>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"seMethods [deploy]\" type=\"MavenRunConfiguration\" factoryName=\"Maven\">\r\n      <MavenSettings>\r\n        <option name=\"myGeneralSettings\" />\r\n        <option name=\"myRunnerSettings\" />\r\n        <option name=\"myRunnerParameters\">\r\n          <MavenRunnerParameters>\r\n            <option name=\"profiles\">\r\n              <set />\r\n            </option>\r\n            <option name=\"goals\">\r\n              <list>\r\n                <option value=\"deploy\" />\r\n              </list>\r\n            </option>\r\n            <option name=\"pomFileName\" value=\"docker-compose.yml\" />\r\n            <option name=\"profilesMap\">\r\n              <map />\r\n            </option>\r\n            <option name=\"resolveToWorkspace\" value=\"false\" />\r\n            <option name=\"workingDirPath\" value=\"$PROJECT_DIR$\" />\r\n          </MavenRunnerParameters>\r\n        </option>\r\n      </MavenSettings>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"docker-deploy\" factoryName=\"docker-compose.yml\" temporary=\"true\">\r\n      <deployment type=\"docker-compose.yml\">\r\n        <settings />\r\n      </deployment>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"docker-deploy\" factoryName=\"docker-image\" temporary=\"true\">\r\n      <deployment type=\"docker-image\">\r\n        <settings />\r\n      </deployment>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"docker-deploy\" factoryName=\"dockerfile\" temporary=\"true\">\r\n      <deployment type=\"dockerfile\">\r\n        <settings />\r\n      </deployment>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"db/Dockerfile\" type=\"docker-deploy\" factoryName=\"dockerfile\" temporary=\"true\" server-name=\"Docker\">\r\n      <deployment type=\"dockerfile\">\r\n        <settings>\r\n          <option name=\"sourceFilePath\" value=\"db/Dockerfile\" />\r\n        </settings>\r\n      </deployment>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"docker-compose.yml: Compose Deployment\" type=\"docker-deploy\" factoryName=\"docker-compose.yml\" temporary=\"true\" server-name=\"Docker\">\r\n      <deployment type=\"docker-compose.yml\">\r\n        <settings>\r\n          <option name=\"sourceFilePath\" value=\"docker-compose.yml\" />\r\n        </settings>\r\n      </deployment>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.App\" />\r\n      <item itemvalue=\"Docker.db/Dockerfile\" />\r\n      <item itemvalue=\"Docker.docker-compose.yml: Compose Deployment\" />\r\n      <item itemvalue=\"JUnit.IntegrationTest\" />\r\n      <item itemvalue=\"JUnit.UnitTests\" />\r\n      <item itemvalue=\"Maven.seMethods [deploy]\" />\r\n      <item itemvalue=\"Maven.seMethods [deploy] (1)\" />\r\n      <item itemvalue=\"Maven.seMethods [deploy] (2)\" />\r\n      <item itemvalue=\"Maven.seMethods [deploy] (3)\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Docker.docker-compose.yml: Compose Deployment\" />\r\n        <item itemvalue=\"Docker.db/Dockerfile\" />\r\n        <item itemvalue=\"Application.App\" />\r\n        <item itemvalue=\"JUnit.UnitTests\" />\r\n        <item itemvalue=\"JUnit.IntegrationTest\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"d33e9b68-162c-4bca-b042-b3073ce8772f\" name=\"Changes\" comment=\"\" />\r\n      <created>1670509441733</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1670509441733</updated>\r\n      <workItem from=\"1671041371298\" duration=\"1669000\" />\r\n      <workItem from=\"1671043267866\" duration=\"2696000\" />\r\n      <workItem from=\"1671099999991\" duration=\"5423000\" />\r\n      <workItem from=\"1671152128844\" duration=\"2329000\" />\r\n      <workItem from=\"1671159599875\" duration=\"9102000\" />\r\n      <workItem from=\"1671173800328\" duration=\"22000\" />\r\n      <workItem from=\"1671371872997\" duration=\"3227000\" />\r\n      <workItem from=\"1671421703777\" duration=\"525000\" />\r\n      <workItem from=\"1671422420403\" duration=\"2145000\" />\r\n      <workItem from=\"1671890207124\" duration=\"2110000\" />\r\n      <workItem from=\"1672380420949\" duration=\"6184000\" />\r\n      <workItem from=\"1672929761832\" duration=\"6185000\" />\r\n      <workItem from=\"1672940673838\" duration=\"1079000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00070\" summary=\"111\">\r\n      <created>1672008771112</created>\r\n      <option name=\"number\" value=\"00070\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00070\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672008771112</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00071\" summary=\"111x\">\r\n      <created>1672009074210</created>\r\n      <option name=\"number\" value=\"00071\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00071\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672009074210</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00072\" summary=\"code coverage\">\r\n      <created>1672030191138</created>\r\n      <option name=\"number\" value=\"00072\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00072\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672030191139</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00073\" summary=\"unittest intetest\">\r\n      <created>1672031546191</created>\r\n      <option name=\"number\" value=\"00073\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00073\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672031546191</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00074\" summary=\"workflow\">\r\n      <created>1672031675466</created>\r\n      <option name=\"number\" value=\"00074\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00074\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672031675466</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00075\" summary=\"workflow\">\r\n      <created>1672031772863</created>\r\n      <option name=\"number\" value=\"00075\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00075\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672031772863</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00076\" summary=\"workfloww\">\r\n      <created>1672031987067</created>\r\n      <option name=\"number\" value=\"00076\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00076\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672031987067</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00077\" summary=\"workfloww\">\r\n      <created>1672032180589</created>\r\n      <option name=\"number\" value=\"00077\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00077\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672032180589</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00078\" summary=\"workfloww\">\r\n      <created>1672032237443</created>\r\n      <option name=\"number\" value=\"00078\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00078\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672032237443</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00079\" summary=\"workfloww\">\r\n      <created>1672032761640</created>\r\n      <option name=\"number\" value=\"00079\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00079\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672032761640</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00080\" summary=\"workfloww\">\r\n      <created>1672033265402</created>\r\n      <option name=\"number\" value=\"00080\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00080\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672033265402</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00081\" summary=\"workfloww\">\r\n      <created>1672033450450</created>\r\n      <option name=\"number\" value=\"00081\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00081\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672033450450</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00082\" summary=\"workfloww\">\r\n      <created>1672033621331</created>\r\n      <option name=\"number\" value=\"00082\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00082\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672033621331</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00083\" summary=\"workfloww\">\r\n      <created>1672034051306</created>\r\n      <option name=\"number\" value=\"00083\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00083\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672034051306</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00084\" summary=\"workfloww\">\r\n      <created>1672034056745</created>\r\n      <option name=\"number\" value=\"00084\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00084\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672034056745</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00085\" summary=\"workfloww\">\r\n      <created>1672034181492</created>\r\n      <option name=\"number\" value=\"00085\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00085\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672034181492</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00086\" summary=\"workfloww\">\r\n      <created>1672034461556</created>\r\n      <option name=\"number\" value=\"00086\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00086\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672034461556</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00087\" summary=\"workfloww\">\r\n      <created>1672034501267</created>\r\n      <option name=\"number\" value=\"00087\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00087\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672034501267</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00088\" summary=\"workfloww\">\r\n      <created>1672034678650</created>\r\n      <option name=\"number\" value=\"00088\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00088\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672034678650</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00089\" summary=\"workfloww\">\r\n      <created>1672037468692</created>\r\n      <option name=\"number\" value=\"00089\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00089\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672037468693</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00090\" summary=\"workfloww\">\r\n      <created>1672037879532</created>\r\n      <option name=\"number\" value=\"00090\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00090\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672037879532</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00091\" summary=\"workfloww\">\r\n      <created>1672038168753</created>\r\n      <option name=\"number\" value=\"00091\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00091\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672038168753</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00092\" summary=\"workfloww\">\r\n      <created>1672038510641</created>\r\n      <option name=\"number\" value=\"00092\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00092\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672038510641</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00093\" summary=\"workfloww\">\r\n      <created>1672039411267</created>\r\n      <option name=\"number\" value=\"00093\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00093\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672039411267</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00094\" summary=\"workfloww\">\r\n      <created>1672040474299</created>\r\n      <option name=\"number\" value=\"00094\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00094\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672040474300</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00095\" summary=\"workfloww\">\r\n      <created>1672075750023</created>\r\n      <option name=\"number\" value=\"00095\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00095\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672075750024</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00096\" summary=\"workfloww\">\r\n      <created>1672076384911</created>\r\n      <option name=\"number\" value=\"00096\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00096\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672076384911</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00097\" summary=\"workfloww\">\r\n      <created>1672077847050</created>\r\n      <option name=\"number\" value=\"00097\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00097\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672077847050</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00098\" summary=\"gugrgugr\">\r\n      <created>1672078926159</created>\r\n      <option name=\"number\" value=\"00098\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00098\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672078926160</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00099\" summary=\"More Test\">\r\n      <created>1672086553581</created>\r\n      <option name=\"number\" value=\"00099\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00099\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672086553581</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00100\" summary=\"query update\">\r\n      <created>1672149268969</created>\r\n      <option name=\"number\" value=\"00100\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00100\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672149268969</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00101\" summary=\"Integration Upgrade\">\r\n      <created>1672181914729</created>\r\n      <option name=\"number\" value=\"00101\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00101\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672181914730</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00102\" summary=\"Integration Upgrade\">\r\n      <created>1672183713552</created>\r\n      <option name=\"number\" value=\"00102\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00102\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672183713553</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00103\" summary=\"Upgraded ++++\">\r\n      <created>1672185247238</created>\r\n      <option name=\"number\" value=\"00103\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00103\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672185247238</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00104\" summary=\"Language\">\r\n      <created>1672327300099</created>\r\n      <option name=\"number\" value=\"00104\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00104\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672327300100</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00105\" summary=\"FIx\">\r\n      <created>1672333611341</created>\r\n      <option name=\"number\" value=\"00105\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00105\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672333611341</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00106\" summary=\"read\">\r\n      <created>1672333839096</created>\r\n      <option name=\"number\" value=\"00106\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00106\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672333839096</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00107\" summary=\"fix\">\r\n      <created>1672333917183</created>\r\n      <option name=\"number\" value=\"00107\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00107\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672333917183</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00108\" summary=\"Report Branch\">\r\n      <created>1672340276655</created>\r\n      <option name=\"number\" value=\"00108\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00108\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672340276655</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00109\" summary=\"Report Branch test\">\r\n      <created>1672340532607</created>\r\n      <option name=\"number\" value=\"00109\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00109\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672340532607</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00110\" summary=\"Report Branch test\">\r\n      <created>1672341070878</created>\r\n      <option name=\"number\" value=\"00110\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00110\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672341070878</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00111\" summary=\"attempt\">\r\n      <created>1672342391031</created>\r\n      <option name=\"number\" value=\"00111\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00111\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672342391031</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00112\" summary=\"COC and use case changes\">\r\n      <created>1672382858728</created>\r\n      <option name=\"number\" value=\"00112\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00112\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672382858728</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00113\" summary=\"COC and use case changes\">\r\n      <created>1672385999949</created>\r\n      <option name=\"number\" value=\"00113\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00113\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672385999949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00114\" summary=\".....\">\r\n      <created>1672386296084</created>\r\n      <option name=\"number\" value=\"00114\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00114\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672386296084</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00115\" summary=\".....\">\r\n      <created>1672935539142</created>\r\n      <option name=\"number\" value=\"00115\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00115\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672935539143</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00116\" summary=\"read me\">\r\n      <created>1672936461289</created>\r\n      <option name=\"number\" value=\"00116\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00116\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672936461289</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00117\" summary=\"read me edit\">\r\n      <created>1672936486237</created>\r\n      <option name=\"number\" value=\"00117\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00117\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672936486237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00118\" summary=\"ss table\">\r\n      <created>1672941374845</created>\r\n      <option name=\"number\" value=\"00118\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00118\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672941374845</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"119\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"UnknownFeatures\">\r\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\"main.yml\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"testing\" />\r\n    <MESSAGE value=\"blesss\" />\r\n    <MESSAGE value=\"111\" />\r\n    <MESSAGE value=\"111x\" />\r\n    <MESSAGE value=\"code coverage\" />\r\n    <MESSAGE value=\"unittest intetest\" />\r\n    <MESSAGE value=\"workflow\" />\r\n    <MESSAGE value=\"workfloww\" />\r\n    <MESSAGE value=\"gugrgugr\" />\r\n    <MESSAGE value=\"More Test\" />\r\n    <MESSAGE value=\"query update\" />\r\n    <MESSAGE value=\"Integration Upgrade + Fix\" />\r\n    <MESSAGE value=\"Integration Upgrade\" />\r\n    <MESSAGE value=\"Upgraded ++++\" />\r\n    <MESSAGE value=\"Language\" />\r\n    <MESSAGE value=\"read\" />\r\n    <MESSAGE value=\"fix\" />\r\n    <MESSAGE value=\"Report Branch\" />\r\n    <MESSAGE value=\"Report Branch test\" />\r\n    <MESSAGE value=\"attempt\" />\r\n    <MESSAGE value=\"COC and use case changes\" />\r\n    <MESSAGE value=\".....\" />\r\n    <MESSAGE value=\"read me\" />\r\n    <MESSAGE value=\"read me edit\" />\r\n    <MESSAGE value=\"ss table\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"ss table\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/com/napier/sem/App.java</url>\r\n          <line>1201</line>\r\n          <option name=\"timeStamp\" value=\"3\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/com/napier/sem/App.java</url>\r\n          <line>1366</line>\r\n          <option name=\"timeStamp\" value=\"4\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/test/java/com/napier/sem/IntegrationTest.java</url>\r\n          <line>9</line>\r\n          <option name=\"timeStamp\" value=\"6\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/test/java/com/napier/sem/IntegrationTest.java</url>\r\n          <line>515</line>\r\n          <option name=\"timeStamp\" value=\"9\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/test/java/com/napier/sem/UnitTests.java</url>\r\n          <line>4</line>\r\n          <option name=\"timeStamp\" value=\"10\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-method\">\r\n          <url>file://$PROJECT_DIR$/src/test/java/com/napier/sem/IntegrationTest.java</url>\r\n          <line>568</line>\r\n          <properties class=\"com.napier.sem.IntegrationTest\" method=\"TotalPopulation_Continent\">\r\n            <option name=\"EMULATED\" value=\"true\" />\r\n            <option name=\"WATCH_EXIT\" value=\"false\" />\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"5\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/sem$UnitTests.ic\" NAME=\"UnitTests Coverage Results\" MODIFIED=\"1672334305205\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>com.napier.sem.*</FILTER>\r\n    </SUITE>\r\n    <SUITE FILE_PATH=\"coverage/sem2$App.ic\" NAME=\"App Coverage Results\" MODIFIED=\"1671891924832\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>com.napier.sem.*</FILTER>\r\n    </SUITE>\r\n    <SUITE FILE_PATH=\"coverage/sem$App.ic\" NAME=\"App Coverage Results\" MODIFIED=\"1672079981919\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>com.napier.sem.*</FILTER>\r\n    </SUITE>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 92abf6093810c119dcb6218e008338397bfbb1d3)
+++ b/.idea/workspace.xml	(date 1672943272713)
@@ -4,15 +4,7 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="d33e9b68-162c-4bca-b042-b3073ce8772f" name="Changes" comment="ss table">
-      <change afterPath="$PROJECT_DIR$/screenshot/ss-1.PNG" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/screenshot/ss-2.PNG" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/screenshot/ss-3.PNG" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/screenshot/ss-4.PNG" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/screenshot/ss-5.PNG" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
-    </list>
+    <list default="true" id="d33e9b68-162c-4bca-b042-b3073ce8772f" name="Changes" comment="ss table" />
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -760,13 +752,13 @@
     <select />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/sem$App.ic" NAME="App Coverage Results" MODIFIED="1672079981919" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
+      <FILTER>com.napier.sem.*</FILTER>
+    </SUITE>
     <SUITE FILE_PATH="coverage/sem$UnitTests.ic" NAME="UnitTests Coverage Results" MODIFIED="1672334305205" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
       <FILTER>com.napier.sem.*</FILTER>
     </SUITE>
     <SUITE FILE_PATH="coverage/sem2$App.ic" NAME="App Coverage Results" MODIFIED="1671891924832" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
-      <FILTER>com.napier.sem.*</FILTER>
-    </SUITE>
-    <SUITE FILE_PATH="coverage/sem$App.ic" NAME="App Coverage Results" MODIFIED="1672079981919" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
       <FILTER>com.napier.sem.*</FILTER>
     </SUITE>
   </component>
