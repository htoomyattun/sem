Index: src/main/java/com/napier/sem/App.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.napier.sem;\r\n\r\nimport java.io.IOException;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\n\r\npublic class App\r\n{\r\n    /**\r\n     * Main function of the program\r\n     * @param args an array of command-line arguments for the application\r\n     */\r\n    public static void main(String[] args) throws IOException {\r\n        // Create new Application\r\n        App app = new App();\r\n\r\n        // Connect to database\r\n        if (args.length < 1)\r\n        {\r\n            app.connect(\"localhost:33060\" );\r\n        }\r\n        else\r\n        {\r\n            app.connect(args[0]);\r\n        }\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////hmt\r\n        // 1. All the countries in the world organised by largest population to smallest.\r\n        ArrayList<Country> countries = app.countryworld();\r\n        // Print All the countries in the world organised by largest population to smallest.\r\n        app.printCountriesReport(countries);\r\n\r\n\r\n        // 2. All the countries in a continent organised by largest population to smallest.\r\n        countries = app.countrycontinent();\r\n        // Print All the countries in a continent organised by largest population to smallest.\r\n        app.printCountriesReport(countries);\r\n\r\n\r\n        // 3.  All the countries in a region organised by largest population to smallest.\r\n        countries = app.countryregion();\r\n        // Print All the countries in a region organised by largest population to smallest.\r\n        app.printCountriesReport(countries);\r\n\r\n\r\n        // 4. The top N populated countries in the world where N is provided by the user.\r\n        countries = app.countrytopnworld();\r\n        // Print The top N populated countries in the world where N is provided by the user.\r\n        app.printCountriesReport(countries);\r\n///////////////////////////////////////////////////////////\r\n\r\n\r\n////////////////////////////////////////////////////////////hah\r\n        // 5.The top N populated countries in a continent where N is provided by the user.\r\n        countries = app.countrytopncontinent();\r\n        // Print The top N populated countries in a continent where N is provided by the user.\r\n        app.printCountriesReport(countries);\r\n\r\n        // 6. The top N populated countries in a region where N is provided by the user.\r\n        countries = app.countrytopnregion();\r\n        // Print Top populated Country in the region\r\n        app.printCountriesReport(countries);\r\n\r\n        // 7. All the cities in the world organised by largest population to smallest.\r\n        ArrayList<City> cities = app.cityworld();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n\r\n////////////////////////////////////////////////////////////ttkk\r\n\r\n        // 8.All the cities in a continent organised by largest population to smallest.\r\n        cities = app.citycontinent();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n        // 9. All the cities in a region organised by largest population to smallest.\r\n        cities = app.cityregion();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n        // 10. All the cities in a country organised by largest population to smallest.\r\n        cities = app.citycountry();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n        // 11. All the cities in a district organised by largest population to smallest.\r\n        cities = app.citydistrict();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n///////////////////////////////////////////////////////////////\r\n\r\n///////////////////////////////////////////////////////////\r\n        // 12.\tThe top N populated cities in the world where N is provided by the user.\r\n        cities = app.citytopnworld();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n        // 13.\tThe top N populated cities in a continent where N is provided by the user.\r\n        cities = app.citytopncontinent();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n        // 14.\tThe top N populated cities in a region where N is provided by the user.\r\n        cities = app.citytopnregion();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n        // 15.\tThe top N populated cities in a country where N is provided by the user.\r\n        cities = app.citytopncountry();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n        // 16.\tThe top N populated cities in a district where N is provided by the user.\r\n        cities = app.citytopndistrict();\r\n        // print city data\r\n        app.printCitiesReport(cities);\r\n\r\n\r\n        // 17.\tAll the capital cities in the world organised by largest population to smallest.\r\n        ArrayList<Capital> cap_cities = app.capitalworld();\r\n        // print city data\r\n        app.printCapitalCityReport(cap_cities);\r\n\r\n\r\n\r\n        // 18.\tAll the capital cities in a continent organised by largest population to smallest.\r\n        cap_cities = app.capitalcontinent();\r\n        // print city data\r\n        app.printCapitalCityReport(cap_cities);\r\n\r\n\r\n        // 19.\tAll the capital cities in a region organised by largest to smallest.\r\n        cap_cities = app.capitalregion();\r\n        // print city data\r\n        app.printCapitalCityReport(cap_cities);\r\n\r\n\r\n        // 20.\tThe top N populated capital cities in the world where N is provided by the user.\r\n        cap_cities = app.capitaltopnworld();\r\n        // print city data\r\n        app.printCapitalCityReport(cap_cities);\r\n\r\n\r\n        // 21.\tThe top N populated capital cities in a continent where N is provided by the user.\r\n        cap_cities = app.capitaltopncontinent();\r\n        // print city data\r\n        app.printCapitalCityReport(cap_cities);\r\n\r\n\r\n        // 22.\tThe top N populated capital cities in a region where N is provided by the user.\r\n        cap_cities = app.capitaltopnregion();\r\n        // print city data\r\n        app.printCapitalCityReport(cap_cities);\r\n/////////////////////////////////////////////\r\n        // 23.\tThe population of people, people living in cities, and people not living in cities in each continent.\r\n        ArrayList<Population> populations = app.populationcitycontinent();\r\n        // print population data\r\n        app.printPopulationReport(populations);\r\n\r\n\r\n        // 24.\tThe population of people, people living in cities, and people not living in cities in each region.\r\n        populations = app.populationcityregion();\r\n        // print population data\r\n        app.printPopulationReport(populations);\r\n\r\n\r\n        //25.\tThe population of people, people living in cities, and people not living in cities in each country.\r\n        populations = app.populationcitycountry();\r\n        // print population data\r\n        app.printPopulationReport(populations);\r\n\r\n\r\n        // 26. Population in the world.\r\n        app.populationworld();\r\n        // get output from extracting total population in the world to put into markdown file\r\n        String world =  app.populationworld();\r\n        System.out.println(world);\r\n\r\n        // 27. Population in the Continent\r\n        app.populationcontinent(\"North America\");\r\n        // get output from extracting total population in the continent to put into markdown file\r\n        String continent =  app.populationcontinent(\"North America\");\r\n        System.out.println(continent);\r\n\r\n        // 28. Population in the Region\r\n        app.populationregion(\"British Islands\");\r\n        // get output from extracting total population in the region to put into markdown file\r\n        String region =  app.populationregion(\"British Islands\");\r\n        System.out.println(region);\r\n\r\n        // 29. Population in the Country\r\n        app.populationcountry(\"Myanmar\");\r\n        // get output from extracting total population in the country to put into markdown file\r\n        String country =  app.populationcountry(\"Myanmar\");\r\n        System.out.println(country);\r\n\r\n        // 30. Population in the District\r\n        app.populationdistrict(\"Texas\");\r\n        // get output from extracting total population in the district to put into markdown file\r\n        String district =  app.populationdistrict(\"Texas\");\r\n        System.out.println(district);\r\n\r\n        // 31. Population in the City\r\n        app.populationcity(\"Amsterdam\");\r\n        // get output from extracting total population in the city to put into markdown file\r\n        String city =  app.populationcity(\"Amsterdam\");\r\n        System.out.println(city);\r\n//////////////////////////////////////////////////////////\r\n\r\n        // 32. language spoken population\r\n        ArrayList<Language> languanges = app.languagepop();\r\n        // print language data\r\n        app.printLanguageReport(languanges);\r\n\r\n\r\n\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////\r\n        // Disconnect from database\r\n        app.disconnect();\r\n\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Connection to MySQL database.\r\n     */\r\n    private static Connection con = null;\r\n\r\n    /**\r\n     * Connect to the MySQL database.\r\n     */\r\n    public void connect(String location)\r\n    {\r\n        try\r\n        {\r\n            // Load Database driver\r\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\r\n        }\r\n        catch (ClassNotFoundException e)\r\n        {\r\n            System.out.println(\"Could not load SQL driver\");\r\n            System.exit(-1);\r\n        }\r\n\r\n        int retries = 10;\r\n        for (int i = 0; i < retries; ++i)\r\n        {\r\n            System.out.println(\"Connecting to database ...\");\r\n            try\r\n            {\r\n\r\n                con = DriverManager.getConnection(\"jdbc:mysql://\" + location + \"/world?\" +\r\n                        \"allowPublicKeyRetrieval=true&useSSL=false\", \"root\", \"thuta\");\r\n                System.out.println(\"Successfully connected\");\r\n                break;\r\n            }\r\n            catch (SQLException sqle)\r\n            {\r\n                System.out.println(\"Failed to connect to database attempt \" + i);\r\n                System.out.println(sqle.getMessage());\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the MySQL database.\r\n     */\r\n    public void disconnect()\r\n    {\r\n        if (con != null)\r\n        {\r\n            try\r\n            {\r\n                // Close connection\r\n                con.close();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                System.out.println(\"Error closing connection to database\");\r\n            }\r\n        }\r\n    }\r\n\r\n/////////////////////////////////////////////////////////////hmt\r\n\r\n    /**\r\n     1. All the countries in the world organised by largest population to smallest.\r\n     **/\r\n    public ArrayList<Country> countryworld()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            // Create string for SQL statement\r\n            String strSelect =\r\n                    \"SELECT country.Code, country.Name, country.Continent, country.Region, country.Population, city.Name FROM country INNER JOIN city on country.capital = city.ID ORDER BY country.Population DESC\";\r\n            // Execute SQL statement\r\n            ResultSet rset = stmt.executeQuery(strSelect);\r\n            // Extract countries data\r\n            ArrayList<Country> countries = new ArrayList<>();\r\n            while (rset.next())\r\n            {\r\n                Country coun = new Country();\r\n                coun.setCode(rset.getString(\"country.Code\"));\r\n                coun.setName(rset.getString(\"country.Name\"));\r\n                coun.setContinent(rset.getString(\"country.Continent\"));\r\n                coun.setRegion(rset.getString(\"country.Region\"));\r\n                coun.setPopulation(rset.getInt(\"country.Population\"));\r\n                coun.setCapital(rset.getString(\"city.Name\"));\r\n                countries.add(coun);\r\n            }\r\n            System.out.println(\"\\n1. All the countries in the world organised by largest population to smallest.\\n\");\r\n            return countries;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get country data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     2. All the countries in a continent organised by largest population to smallest.\r\n     **/\r\n    public ArrayList<Country> countrycontinent()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            String continent = \"'Asia'\";\r\n            // Create string for SQL statement\r\n            String strSelect =\r\n                    \"SELECT country.Code, country.Name, country.Continent, country.Region, country.Population, city.Name FROM country INNER JOIN city on country.capital = city.ID WHERE country.Continent=\"+ continent +\" ORDER BY country.Population DESC\";\r\n            // Execute SQL statement\r\n            ResultSet rset = stmt.executeQuery(strSelect);\r\n            // Extract countries data\r\n            ArrayList<Country> countries = new ArrayList<>();\r\n            while (rset.next())\r\n            {\r\n                Country coun = new Country();\r\n                coun.setCode(rset.getString(\"country.Code\"));\r\n                coun.setName(rset.getString(\"country.Name\"));\r\n                coun.setContinent(rset.getString(\"country.Continent\"));\r\n                coun.setRegion(rset.getString(\"country.Region\"));\r\n                coun.setPopulation(rset.getInt(\"country.Population\"));\r\n                coun.setCapital(rset.getString(\"city.Name\"));\r\n                countries.add(coun);\r\n            }\r\n            System.out.println(\"\\n2. All the countries in \"+continent+\" organised by largest population to smallest.\\n\");\r\n            return countries;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get country data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     3. All the countries in a region organised by largest population to smallest.\r\n     **/\r\n    public ArrayList<Country> countryregion()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            String region = \"'Central America'\";\r\n            // Create string for SQL statement\r\n            String strSelect =\r\n                    \"SELECT country.Code, country.Name, country.Continent, country.Region, country.Population, city.Name FROM country INNER JOIN city on country.capital = city.ID WHERE country.Region=\"+ region +\" ORDER BY country.Population DESC\";\r\n            // Execute SQL statement\r\n            ResultSet rset = stmt.executeQuery(strSelect);\r\n            // Extract countries data\r\n            ArrayList<Country> countries = new ArrayList<>();\r\n            while (rset.next())\r\n            {\r\n                Country coun = new Country();\r\n                coun.setCode(rset.getString(\"country.Code\"));\r\n                coun.setName(rset.getString(\"country.Name\"));\r\n                coun.setContinent(rset.getString(\"country.Continent\"));\r\n                coun.setRegion(rset.getString(\"country.Region\"));\r\n                coun.setPopulation(rset.getInt(\"country.Population\"));\r\n                coun.setCapital(rset.getString(\"city.Name\"));\r\n                countries.add(coun);\r\n            }\r\n            System.out.println(\"\\n3.All the countries in \"+region+\" organised by largest population to smallest.\\n\");\r\n            return countries;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get country data\");\r\n            return null;\r\n        }\r\n    }\r\n    /***\r\n     4. The top N populated countries in the world where N is provided by the user.\r\n     */\r\n    public ArrayList<Country> countrytopnworld()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            int limit = 15;       // for N in a list of Top \"N\" populated country in the world\r\n            // Create string for SQL statement\r\n            String strSelect =\r\n                    \"SELECT country.Code, country.Name, country.Continent, country.Region, country.Population, city.Name FROM country INNER JOIN city on country.capital = city.ID ORDER BY country.Population DESC LIMIT \"+ limit;\r\n            // Execute SQL statement\r\n            ResultSet rset = stmt.executeQuery(strSelect);\r\n            // Extract countries data\r\n            ArrayList<Country> countries = new ArrayList<>();\r\n            while (rset.next())\r\n            {\r\n                Country coun = new Country();\r\n                coun.setCode(rset.getString(\"country.Code\"));\r\n                coun.setName(rset.getString(\"country.Name\"));\r\n                coun.setContinent(rset.getString(\"country.Continent\"));\r\n                coun.setRegion(rset.getString(\"country.Region\"));\r\n                coun.setPopulation(rset.getInt(\"country.Population\"));\r\n                coun.setCapital(rset.getString(\"city.Name\"));\r\n                countries.add(coun);\r\n            }\r\n            System.out.println(\"\\n4. The top \" + limit + \" populated countries in the world where N is provided by the user.\\n\");\r\n            return countries;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get country data\");\r\n            return null;\r\n        }\r\n    }\r\n///////////////////////////////////////////////////\r\n\r\n///////////////////////////////////////////////////////////hah\r\n\r\n    /**\r\n     5.The top N populated countries in a continent where N is provided by the user.\r\n     */\r\n    public ArrayList<Country> countrytopncontinent()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            int limit = 15;       // for N in a list of Top \"N\" populated country in the world\r\n            String continent = \"'Asia'\";\r\n            // Create string for SQL statement\r\n            String strSelect =\r\n                    \"SELECT country.Code, country.Name, country.Continent, country.Region, country.Population, city.Name FROM country INNER JOIN city on country.capital = city.ID WHERE country.Continent=\"+ continent + \" ORDER BY country.Population DESC LIMIT \"+ limit;\r\n            // Execute SQL statement\r\n            ResultSet rset = stmt.executeQuery(strSelect);\r\n            // Extract countries data\r\n            ArrayList<Country> countries = new ArrayList<>();\r\n            while (rset.next())\r\n            {\r\n                Country coun = new Country();\r\n                coun.setCode(rset.getString(\"country.Code\"));\r\n                coun.setName(rset.getString(\"country.Name\"));\r\n                coun.setContinent(rset.getString(\"country.Continent\"));\r\n                coun.setRegion(rset.getString(\"country.Region\"));\r\n                coun.setPopulation(rset.getInt(\"country.Population\"));\r\n                coun.setCapital(rset.getString(\"city.Name\"));\r\n                countries.add(coun);\r\n            }\r\n            System.out.println(\"\\n5. The top \"+ limit +\" populated countries in \"+ continent+\" continent.\");\r\n            return countries;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get country data\");\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     6. The top N populated countries in a region where N is provided by the user.\r\n     */\r\n    public ArrayList<Country> countrytopnregion()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            int limit = 15;       // for N in a list of Top \"N\" populated country in the world\r\n            String region = \"'Southeast Asia'\";\r\n            // Create string for SQL statement\r\n            String strSelect =\r\n                    \"SELECT country.Code, country.Name, country.Continent, country.Region, country.Population, city.Name FROM country INNER JOIN city on country.capital = city.ID WHERE country.Region=\"+ region + \" ORDER BY country.Population DESC LIMIT \"+limit;\r\n            // Execute SQL statement\r\n            ResultSet rset = stmt.executeQuery(strSelect);\r\n            // Extract countries data\r\n            ArrayList<Country> countries = new ArrayList<>();\r\n            while (rset.next())\r\n            {\r\n                Country coun = new Country();\r\n                coun.setCode(rset.getString(\"country.Code\"));\r\n                coun.setName(rset.getString(\"country.Name\"));\r\n                coun.setContinent(rset.getString(\"country.Continent\"));\r\n                coun.setRegion(rset.getString(\"country.Region\"));\r\n                coun.setPopulation(rset.getInt(\"country.Population\"));\r\n                coun.setCapital(rset.getString(\"city.Name\"));\r\n                countries.add(coun);\r\n            }\r\n            System.out.println(\"\\n6. The top \"+ limit +\" populated countries in \"+ region+\" region.\");\r\n            return countries;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get country data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     7. All the cities in the world organised by largest population to smallest.\r\n     **/\r\n    public ArrayList<City> cityworld()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on city.CountryCode=country.Code ORDER BY city.Population DESC;\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n7. All the cities in the world organised by largest population to smallest.\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get Cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////////ttkk\r\n    /**\r\n     8. All the cities in a continent organised by largest population to smallest.\r\n     **/\r\n    public ArrayList<City> citycontinent()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n            String continent = \"'Asia'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on city.CountryCode=country.Code WHERE country.Continent=\"+ continent  +\" ORDER BY city.Population DESC;\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n8. All the cities in\" +continent+\" organised by largest population to smallest.\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get Cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     9. All the cities in a region organised by largest population to smallest.\r\n     **/\r\n\r\n    public ArrayList<City> cityregion()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n            String region = \"'Southeast Asia'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on city.CountryCode=country.Code WHERE country.Region=\"+region+\" ORDER BY city.Population DESC;\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n9. All the cities in \"+region+\" organised by largest population to smallest. \");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get Cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     10.All the cities in a country organised by largest population to smallest.\r\n     **/\r\n\r\n\r\n    public ArrayList<City> citycountry()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n            String country = \"'Myanmar'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on city.CountryCode=country.Code WHERE country.name=\"+country+\" ORDER BY city.Population DESC;\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n10. All the cities in \"+country+\" organised by largest population to smallest. country sorted by largest to smallest population\\n\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get Cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     11. All the cities in a district organised by largest population to smallest.\r\n     **/\r\n    public ArrayList<City> citydistrict()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n            String district = \"'Florida'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on city.CountryCode=country.Code WHERE city.District=\"+district+\" ORDER BY city.Population DESC;\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n11. All the cities in \"+district+\" organised by largest population to smallest. \\n\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get Cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n///////////////////////////////////////////////////////////////\r\n    /***\r\n     12.\tThe top N populated cities in the world where N is provided by the user.\r\n     */\r\n    public ArrayList<City> citytopnworld()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population \"\r\n                            + \"FROM city INNER JOIN country on city.CountryCode=country.Code \"\r\n                            + \"ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\12. The top \" + limit + \" populated cities in the world. \\n\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     13.\tThe top N populated cities in a continent where N is provided by the user.\r\n     */\r\n    public ArrayList<City> citytopncontinent()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;\r\n            String continent = \"Oceania\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population \"\r\n                            + \"FROM city INNER JOIN country on city.CountryCode=country.Code \"\r\n                            + \"WHERE country.Continent='\" + continent\r\n                            + \"' ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n13. The top \" + limit + \" populated cities in \" + continent +\" continent\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     14.\tThe top N populated cities in a region where N is provided by the user.\r\n     */\r\n    public ArrayList<City> citytopnregion()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;\r\n            String region= \"Western Europe\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population \"\r\n                            + \"FROM city INNER JOIN country on city.CountryCode=country.Code \"\r\n                            + \"WHERE country.Region='\" + region\r\n                            + \"' ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n14.\\tThe top \" + limit + \" populated cities in \" + region +\" region.\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     15.\tThe top N populated cities in a country where N is provided by the user.\r\n     */\r\n    public ArrayList<City> citytopncountry()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;\r\n            String country= \"France\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population \"\r\n                            + \"FROM city INNER JOIN country on city.CountryCode=country.Code \"\r\n                            + \"WHERE country.Name='\" + country\r\n                            + \"' ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n15. The top \" + limit + \"  populated cities in \" + country +\" country.\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     16.\tThe top N populated cities in a district where N is provided by the user.\r\n     */\r\n    public ArrayList<City> citytopndistrict()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;\r\n            String district = \"California\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population \"\r\n                            + \"FROM city INNER JOIN country on city.CountryCode=country.Code \"\r\n                            + \"WHERE city.District='\" + district\r\n                            + \"' ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<City> cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                City actiy = new City();\r\n                actiy.setName(result.getString(\"city.Name\"));\r\n                actiy.setCountry(result.getString(\"country.Name\"));\r\n                actiy.setDistrict(result.getString(\"city.District\"));\r\n                actiy.setPopulation(result.getInt(\"city.Population\"));\r\n                cities.add(actiy);\r\n            }\r\n            System.out.println(\"\\n16. The top \" + limit + \" populated cities in \" + district +\" district.\");\r\n            return cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     17.\tAll the capital cities in the world organised by largest population to smallest.\r\n     **/\r\n\r\n    public ArrayList<Capital> capitalworld()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on country.capital = city.ID ORDER BY Population DESC;\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<Capital> cap_cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                Capital ca = new Capital();\r\n                ca.setName(result.getString(\"city.Name\"));\r\n                ca.setCountry(result.getString(\"country.Name\"));\r\n                ca.setDistrict(result.getString(\"city.District\"));\r\n                ca.setPopulation(result.getInt(\"city.Population\"));\r\n                cap_cities.add(ca);\r\n            }\r\n            System.out.println(\"\\n17. All the capital cities in the world organised by largest population to smallest.\");\r\n            return cap_cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get capital cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     18.\tAll the capital cities in a continent organised by largest population to smallest.\r\n     **/\r\n\r\n    public ArrayList<Capital> capitalcontinent()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n            String continent = \"'Asia'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on country.capital = city.ID WHERE country.Continent=\" + continent +\" ORDER BY Population DESC;\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<Capital> cap_cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                Capital ca = new Capital();\r\n                ca.setName(result.getString(\"city.Name\"));\r\n                ca.setCountry(result.getString(\"country.Name\"));\r\n                ca.setDistrict(result.getString(\"city.District\"));\r\n                ca.setPopulation(result.getInt(\"city.Population\"));\r\n                cap_cities.add(ca);\r\n            }\r\n            System.out.println(\"\\n18. All the capital cities in \"+continent+\" continent organised by largest population to smallest.\");\r\n            return cap_cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get capital cities data\");\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     19.\tAll the capital cities in a region organised by largest to smallest.\r\n     **/\r\n\r\n    public ArrayList<Capital> capitalregion()\r\n    {\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement sql = con.createStatement();\r\n\r\n            // Create string for SQL statement\r\n            String region = \"'Middle East'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on country.capital = city.ID WHERE country.Region=\"+region+\" ORDER BY Population DESC; \";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = sql.executeQuery(getCityReports);\r\n\r\n            // Extract city data\r\n            ArrayList<Capital> cap_cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                Capital ca = new Capital();\r\n                ca.setName(result.getString(\"city.Name\"));\r\n                ca.setCountry(result.getString(\"country.Name\"));\r\n                ca.setDistrict(result.getString(\"city.District\"));\r\n                ca.setPopulation(result.getInt(\"city.Population\"));\r\n                cap_cities.add(ca);\r\n            }\r\n            System.out.println(\"\\n19. All the capital cities in \"+region+\" region organised by largest to smallest. \");\r\n            return cap_cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get capital cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     20.\tThe top N populated capital cities in the world where N is provided by the user.\r\n     */\r\n    public ArrayList<Capital> capitaltopnworld()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;       // for N in a list of Top \"N\" populated cities in the world\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on country.capital = city.ID ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<Capital> cap_cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                Capital ca = new Capital();\r\n                ca.setName(result.getString(\"city.Name\"));\r\n                ca.setCountry(result.getString(\"country.Name\"));\r\n                ca.setDistrict(result.getString(\"city.District\"));\r\n                ca.setPopulation(result.getInt(\"city.Population\"));\r\n                cap_cities.add(ca);\r\n            }\r\n            System.out.println(\"\\n20. The top \" + limit + \" populated capital cities in the world. \");\r\n            return cap_cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated capital cities data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     21.\tThe top N populated capital cities in a continent where N is provided by the user.\r\n     */\r\n    public ArrayList<Capital> capitaltopncontinent()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;       // for N in a list of Top \"N\" populated cities in the world\r\n            String continent =\"'Asia'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on country.capital = city.ID WHERE country.Continent=\"+continent+\" ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<Capital> cap_cities = new ArrayList<>();\r\n            while (result.next())\r\n            {\r\n                Capital ca = new Capital();\r\n                ca.setName(result.getString(\"city.Name\"));\r\n                ca.setCountry(result.getString(\"country.Name\"));\r\n                ca.setDistrict(result.getString(\"city.District\"));\r\n                ca.setPopulation(result.getInt(\"city.Population\"));\r\n                cap_cities.add(ca);\r\n            }\r\n            System.out.println(\"\\n21. The top  \" + limit + \" populated capital cities in \"+continent+\" continent.\");\r\n            return cap_cities;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated capital cities data \");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     22.\tThe top N populated capital cities in a region where N is provided by the user.\r\n     */\r\n    public ArrayList<Capital> capitaltopnregion()\r\n    {\r\n        try {\r\n            Statement stmt = con.createStatement();  // Create an SQL statement\r\n            // Create string for SQL statement\r\n            int limit = 15;       // for N in a list of Top \"N\" populated cities in the world\r\n            String region = \"'Eastern Asia'\";\r\n            String getCityReports =\r\n                    \"SELECT city.Name, country.Name, city.District, city.Population FROM city INNER JOIN country on country.capital = city.ID WHERE country.Region=\" + region + \" ORDER BY Population DESC LIMIT \" + limit;\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(getCityReports);\r\n            // Extract city data\r\n            ArrayList<Capital> cap_cities = new ArrayList<>();\r\n            while (result.next()) {\r\n                Capital ca = new Capital();\r\n                ca.setName(result.getString(\"city.Name\"));\r\n                ca.setCountry(result.getString(\"country.Name\"));\r\n                ca.setDistrict(result.getString(\"city.District\"));\r\n                ca.setPopulation(result.getInt(\"city.Population\"));\r\n                cap_cities.add(ca);\r\n            }\r\n            System.out.println(\"\\n22. The top \" + limit + \" populated capital cities in  \" + region + \" region.\");\r\n            return cap_cities;\r\n        } catch (Exception e) {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of top N populated capital cities data \");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /////////////////////////////////////////////////////////////\r\n    /***\r\n     23.\tThe population of people, people living in cities, and people not living in cities in each continent.\r\n     */\r\n    public ArrayList<Population> populationcitycontinent()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt_1 = con.createStatement();  // Create a first SQL statement\r\n            // Create string for the first SQL statement\r\n            String getPopulationReports_Country = \"SELECT Continent, SUM(Population) FROM country \"\r\n                    + \"GROUP BY Continent HAVING SUM(Population)>0 ORDER BY Continent DESC;\";\r\n            // Execute the first SQL statement\r\n            ResultSet result_1 = stmt_1.executeQuery(getPopulationReports_Country);\r\n\r\n            Statement stmt_2 = con.createStatement();  // Create a second SQL statement\r\n            // Create string for the second SQL statement\r\n            String getPopulationReports_City = \"SELECT country.Continent, SUM(city.Population) FROM city \"\r\n                    + \"INNER JOIN country ON city.CountryCode=country.Code \"\r\n                    + \"GROUP BY country.Continent ORDER BY country.Continent DESC;\";\r\n            // Execute the second SQL statement\r\n            ResultSet result_2 = stmt_2.executeQuery(getPopulationReports_City);\r\n\r\n            // Extract total population data\r\n            ArrayList<Population> populations = new ArrayList<>();\r\n            while (result_1.next() & result_2.next())\r\n            {\r\n                Population pop = new Population();\r\n\r\n                pop.setName(result_1.getString(\"Continent\"));\r\n                pop.setTotalpopulation(result_1.getLong(\"SUM(Population)\"));\r\n\r\n                long citypop = result_2.getLong(\"SUM(city.Population)\");\r\n                Float citypercentage = (float) ((citypop * 100.00) / pop.getTotalpopulation());\r\n                pop.setCitypopulation(citypop + \"(\" + String.format(\"%.2f%%\", citypercentage) + \")\");\r\n\r\n                long notcitypop = pop.getTotalpopulation() - citypop;\r\n                Float notcitypercentage = (float) ((notcitypop * 100.00) / pop.getTotalpopulation());\r\n                pop.setNotcitypopulation(notcitypop + \"(\" + String.format(\"%.2f%%\", notcitypercentage) + \")\");\r\n\r\n                populations.add(pop);\r\n            }\r\n            System.out.println(\"\\n23. The population of people, people living in cities, and people not living in cities in each continent.\");\r\n            return populations;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of the population of people, people living in cities, and people not living in cities in each continent\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     24.\tThe population of people, people living in cities, and people not living in cities in each region.\r\n     */\r\n    public ArrayList<Population> populationcityregion()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt_1 = con.createStatement();  // Create a first SQL statement\r\n            // Create string for the first SQL statement\r\n            String getPopulationReports_Country = \"SELECT Region, SUM(Population) FROM country \"\r\n                    + \"GROUP BY Region HAVING SUM(Population)>0 ORDER BY Region DESC;\";\r\n            // Execute the first SQL statement\r\n            ResultSet result_1 = stmt_1.executeQuery(getPopulationReports_Country);\r\n\r\n            Statement stmt_2 = con.createStatement();  // Create a second SQL statement\r\n            // Create string for the second SQL statement\r\n            String getPopulationReports_City = \"SELECT country.Region, SUM(city.Population) FROM city \"\r\n                    + \"INNER JOIN country ON city.CountryCode=country.Code \"\r\n                    + \"GROUP BY country.Region ORDER BY country.Region DESC;\";\r\n            // Execute the second SQL statement\r\n            ResultSet result_2 = stmt_2.executeQuery(getPopulationReports_City);\r\n\r\n            // Extract total population data\r\n            ArrayList<Population> populations = new ArrayList<>();\r\n            while (result_1.next() & result_2.next())\r\n            {\r\n                Population pop = new Population();\r\n\r\n                pop.setName(result_1.getString(\"Region\"));\r\n                pop.setTotalpopulation(result_1.getLong(\"SUM(Population)\"));\r\n                long citypop = result_2.getLong(\"SUM(city.Population)\");\r\n                Float citypercentage = (float) ((citypop * 100.00) / pop.getTotalpopulation());\r\n                pop.setCitypopulation(citypop + \"(\" + String.format(\"%.2f%%\", citypercentage) + \")\");\r\n                long notcitypop = pop.getTotalpopulation() - citypop;\r\n                Float notcitypercentage = (float) ((notcitypop * 100.00) / pop.getTotalpopulation());\r\n                pop.setNotcitypopulation(notcitypop + \"(\" + String.format(\"%.2f%%\", notcitypercentage) + \")\");\r\n                populations.add(pop);\r\n            }\r\n            System.out.println(\"\\n24. The population of people, people living in cities, and people not living in cities in each region.\");\r\n            return populations;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of the population of people, people living in cities, and people not living in cities in each region.\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /***\r\n     25.\tThe population of people, people living in cities, and people not living in cities in each country.\r\n     */\r\n    public ArrayList<Population> populationcitycountry()\r\n    {\r\n        try\r\n        {\r\n            Statement stmt_1 = con.createStatement();  // Create a first SQL statement\r\n            // Create string for the first SQL statement\r\n            String getPopulationReports_Country = \"SELECT Name, Population FROM country \"\r\n                    + \"HAVING Population>0 ORDER BY Name ASC;\";\r\n            // Execute the first SQL statement\r\n            ResultSet result_1 = stmt_1.executeQuery(getPopulationReports_Country);\r\n\r\n            Statement stmt_2 = con.createStatement();  // Create a second SQL statement\r\n            // Create string for the second SQL statement\r\n            String getPopulationReports_City = \"SELECT country.Name, SUM(city.Population) FROM city \"\r\n                    + \"INNER JOIN country ON city.CountryCode=country.Code \"\r\n                    + \"GROUP BY country.Name ORDER BY country.Name ASC;\";\r\n            // Execute the second SQL statement\r\n            ResultSet result_2 = stmt_2.executeQuery(getPopulationReports_City);\r\n\r\n            // Extract total population data\r\n            ArrayList<Population> populations = new ArrayList<>();\r\n            while (result_1.next() & result_2.next())\r\n            {\r\n                Population pop = new Population();\r\n\r\n                pop.setName(result_1.getString(\"Name\"));\r\n                pop.setTotalpopulation(result_1.getLong(\"Population\"));\r\n\r\n                long citypop = result_2.getLong(\"SUM(city.Population)\");\r\n                float citypercentage;\r\n                long notcitypop;\r\n                float notcitypercentage;\r\n\r\n                if (pop.getTotalpopulation() > citypop) {\r\n                    citypercentage = (float) ((citypop * 100.00) / pop.getTotalpopulation());\r\n                    notcitypop = pop.getTotalpopulation() - citypop;\r\n                    notcitypercentage = (float) ((notcitypop * 100.00) / pop.getTotalpopulation());\r\n                }\r\n                else{\r\n                    citypercentage = (float) ((citypop * 100.00) / citypop);\r\n                    notcitypop = citypop - pop.getTotalpopulation();\r\n                    notcitypercentage = (float) ((notcitypop * 100.00) / citypop);\r\n                    citypercentage = citypercentage - notcitypercentage;\r\n                }\r\n                pop.setCitypopulation(citypop + \"(\" + String.format(\"%.2f%%\", citypercentage) + \")\");\r\n                pop.setNotcitypopulation(notcitypop + \"(\" + String.format(\"%.2f%%\", notcitypercentage) + \")\");\r\n\r\n                populations.add(pop);\r\n            }\r\n            System.out.println(\"\\n25. The population of people, people living in cities, and people not living in cities in each country.\");\r\n            return populations;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get a list of the population of people, people living in cities, and people not living in cities in each country.\");\r\n            return null;\r\n        }\r\n    }\r\n////////////////////////////////////////////////////////////////\r\n    /***\r\n     26.\tPopulation in the world.\r\n     */\r\n    public String populationworld()\r\n    {\r\n        String popp = \"\";\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            // Create string for SQL statement\r\n            String strSelect = \"SELECT SUM(Population) FROM country;\";\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(strSelect);\r\n            // Extract population\r\n            Population pop = new Population();\r\n            while (result.next())\r\n            {\r\n                pop.setTotalpopulation(result.getLong(\"SUM(Population)\"));\r\n            }\r\n            popp = \"\\n26. Population in the world is \" + pop.getTotalpopulation() + \".\";\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get population data\");\r\n        }\r\n        return popp;\r\n    }\r\n\r\n    /***\r\n     27.\tPopulation in the Continent\r\n     */\r\n    public String populationcontinent(String continent)\r\n    {\r\n        String popp = \"\";\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            // Create string for SQL statement\r\n            String strSelect = \"SELECT SUM(Population) FROM country WHERE Continent='\"+continent+\"'\";\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(strSelect);\r\n            // Extract population\r\n            Population pop = new Population();\r\n            while (result.next())\r\n            {\r\n                pop.setTotalpopulation(result.getLong(\"SUM(Population)\"));\r\n            }\r\n\r\n            popp = \"\\n27. Population in \" + continent + \" Continent is \" + pop.getTotalpopulation() +\".\";\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get population data\");\r\n        }\r\n        return popp;\r\n    }\r\n    /***\r\n     28.\tPopulation in the Region\r\n     */\r\n    public String populationregion(String region) {\r\n        String popp = \"\";\r\n        try {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            // Create string for SQL statement\r\n            String strSelect = \"SELECT SUM(Population) FROM country WHERE Region='\" + region + \"'\";\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(strSelect);\r\n            // Extract population\r\n            Population pop = new Population();\r\n            while (result.next()) {\r\n                pop.setTotalpopulation(result.getLong(\"SUM(Population)\"));\r\n            }\r\n\r\n            popp = \"\\n28. Population in \" + region + \" Region is \" + pop.getTotalpopulation() + \".\";\r\n        } catch (Exception e) {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get population data\");\r\n        }\r\n        return popp;\r\n    }\r\n\r\n    /***\r\n     29.\tPopulation in the Country\r\n     */\r\n    public String populationcountry(String country)\r\n    {\r\n        String popp = \"\";\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            // Create string for SQL statement\r\n            String strSelect = \"SELECT SUM(Population) FROM country WHERE Name='\"+country+\"'\";\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(strSelect);\r\n            // Extract population\r\n            Population pop = new Population();\r\n            while (result.next())\r\n            {\r\n                pop.setTotalpopulation(result.getLong(\"SUM(Population)\"));\r\n            }\r\n\r\n            popp = \"\\n29. Population in \" + country + \" Country is \" + pop.getTotalpopulation() + \".\";\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get population data\");\r\n        }\r\n        return popp;\r\n    }\r\n\r\n    /***\r\n     30.\tPopulation in the District\r\n     */\r\n    public String populationdistrict(String district)\r\n    {\r\n        String popp = \"\";\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            // Create string for SQL statement\r\n            String strSelect = \"SELECT SUM(Population) FROM city WHERE District='\"+district+\"'\";\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(strSelect);\r\n            // Extract population\r\n            Population pop = new Population();\r\n            while (result.next())\r\n            {\r\n                pop.setTotalpopulation(result.getLong(\"SUM(Population)\"));\r\n            }\r\n\r\n            popp = \"\\n30. Population in \" + district + \" District is \" + pop.getTotalpopulation() + \".\";\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get population data\");\r\n        }\r\n        return popp;\r\n    }\r\n\r\n    /***\r\n     31.\tPopulation in the City\r\n     */\r\n    public String populationcity(String city)\r\n    {\r\n        String popp = \"\";\r\n        try\r\n        {\r\n            // Create an SQL statement\r\n            Statement stmt = con.createStatement();\r\n            // Create string for SQL statement\r\n            String strSelect = \"SELECT Population FROM city WHERE Name='\"+city+\"'\";\r\n\r\n            // Execute SQL statement\r\n            ResultSet result = stmt.executeQuery(strSelect);\r\n            // Extract population\r\n            Population pop = new Population();\r\n            while (result.next())\r\n            {\r\n                pop.setTotalpopulation(result.getLong(\"Population\"));\r\n            }\r\n\r\n            popp = \"\\n31. Population in \" + city + \" City is \" + pop.getTotalpopulation() + \".\";\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get population data\");\r\n        }\r\n        return popp;\r\n    }\r\n\r\n\r\n    /**\r\n     * 32. languages from greatest number to smallest, including the percentage of the world population\r\n     */\r\n    public ArrayList<Language> languagepop(){\r\n        System.out.println(\"\\n32. Population of people who uses certain languages\\n\");\r\n        try\r\n        {\r\n            Statement stmt_1 = con.createStatement();  // Create a first SQL statement\r\n            // Create string for the first SQL statement\r\n            String getPeopleSpeakLanguage = \"SELECT countrylanguage.Language, Sum((countrylanguage.Percentage/100)*country.Population) as totalpopulation FROM countrylanguage, country WHERE country.Code = countrylanguage.CountryCode and countrylanguage.Language IN ('Chinese', 'English', 'Hindi','Spanish','Arabic' ) GROUP BY countrylanguage.Language  ORDER BY totalpopulation desc\";\r\n            // Execute the first SQL statement\r\n            ResultSet result_1 = stmt_1.executeQuery(getPeopleSpeakLanguage);\r\n\r\n            Statement stmt_2 = con.createStatement();  // Create a second SQL statement\r\n            // Create string for the second SQL statement\r\n            String getWorldPopulation = \"select Sum(Population) as worldpopulation from country;\";\r\n            // Execute the second SQL statement\r\n            ResultSet result_2 = stmt_2.executeQuery(getWorldPopulation);\r\n\r\n            ArrayList<Language> language = new ArrayList<>();\r\n\r\n            float worldpopulation = 0;\r\n\r\n            while (result_2.next()){\r\n                worldpopulation = result_2.getLong(\"worldpopulation\");\r\n            }\r\n\r\n            while (result_1.next()) {\r\n\r\n                // Calculate percentage of people who speak a language in the world\r\n                long languagenum = result_1.getLong(\"totalpopulation\");\r\n\r\n                float percent = ((float)languagenum / worldpopulation) * (float)(100.00);\r\n\r\n                Language langu = new Language();\r\n                langu.setName(result_1.getString(\"countrylanguage.Language\"));\r\n                langu.setPopulation(result_1.getLong(\"totalpopulation\"));\r\n                langu.setPercentage(percent);\r\n\r\n                language.add(langu);\r\n\r\n            }\r\n\r\n\r\n            return language;\r\n\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            System.out.println(\"Failed to get population of speakers\");\r\n            return null;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //////////////////////////////////////////////////////////\r\n    // out put and print files for country\r\n    public void printCountriesReport(ArrayList<Country> countries)\r\n    {\r\n        // Check Countries is not null\r\n        if (countries == null)\r\n        {\r\n            System.out.println(\"No Countries\");\r\n            return;\r\n        }\r\n        // Print header\r\n        System.out.printf(\"%-5s %-15s %-20s %-20s %-20s %-20s%n\\n\", \"Code\", \"Name\", \"Continent\", \"Region\", \"Population\", \"Capital \");\r\n//        System.out.println(\"\\n\");\r\n\r\n        // Check Country is not empty\r\n        if (!countries.isEmpty())\r\n        {\r\n            // Loop over all countries in the list\r\n            for (Country coun : countries)\r\n            {\r\n                // Check Country contain null\r\n                if (coun == null){\r\n                    continue;}\r\n                String country_string =\r\n                        String.format(\"%-5s %-15s %-20s %-20s %-20s %-20s\",\r\n                                coun.getCode(), coun.getName(), coun.getContinent(), coun.getRegion(), coun.getPopulation(), coun.getCapital());\r\n                System.out.println(country_string);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            String country_string = \"Country Report List is empty\";\r\n            System.out.println(country_string);\r\n        }\r\n    }\r\n\r\n\r\n/////////////////////////////////////////////////////////////\r\n// out put and print files for city\r\n\r\n\r\n    public void printCitiesReport(ArrayList<City> cities)\r\n    {\r\n        // Check cities is not null\r\n        if (cities == null)\r\n        {\r\n            System.out.println(\"No cities\");\r\n            return;\r\n        }\r\n        // Print header\r\n        System.out.printf(\"%-25s %-25s %-25s %-25s%n\\n\", \"City Name\", \"Country Name\", \"District\", \"Population \");\r\n//        System.out.println(\"\\n\");\r\n\r\n        // Check City is not empty\r\n        if (!cities.isEmpty())\r\n        {\r\n            // Loop over all cities in the list\r\n            for (City city : cities) {\r\n                // Check City contain null\r\n                if (city == null){\r\n                    continue;}\r\n                String city_string =\r\n                        String.format(\"%-25s %-25s %-25s %-25s\",\r\n                                city.getName(), city.getCountry(), city.getDistrict(), city.getPopulation());\r\n                System.out.println(city_string);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            String city_string = \"City Report List is empty\";\r\n            System.out.println(city_string);\r\n        }\r\n    }\r\n////////////////////////////////////////////////////////////////\r\n// out put and print files for capital\r\n    public void printCapitalCityReport(ArrayList<Capital> capitalcities)\r\n    {\r\n        // Check capital cities is not null\r\n        if (capitalcities == null)\r\n        {\r\n            System.out.println(\"No capital cities\");\r\n            return;\r\n        }\r\n        // Print header\r\n        System.out.printf(\"%-25s %-25s %-25s %-25s%n\\n\", \"City Name\", \"Country Name\", \"District\", \"Population\");\r\n\r\n        // Check Capital City is not empty\r\n        if (!capitalcities.isEmpty())\r\n        {\r\n            // Loop over all capital cities in the list\r\n            for (Capital city : capitalcities) {\r\n                // Check Capital City contain null\r\n                if (city == null){\r\n                    continue;}\r\n                String city_string =\r\n                        String.format(\"%-25s %-25s %-25s %-25s\",\r\n                                city.getName(), city.getCountry(), city.getDistrict(), city.getPopulation());\r\n                System.out.println(city_string);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            String city_string = \"Capital City Report List is empty\";\r\n            System.out.println(city_string);\r\n        }\r\n    }\r\n\r\n///////////////////////////////////////////////////////////\r\n// out put and print files for population\r\n    public void printPopulationReport(ArrayList<Population> populations)\r\n    {\r\n        // Check populations is not null\r\n        if (populations == null)\r\n        {\r\n            System.out.println(\"No population for given data.\");\r\n            return;\r\n        }\r\n\r\n        // Print header\r\n        System.out.printf(\"%-25s %-25s %-25s %-25s%n\\n\", \"Place\", \"Total Population\", \"Population of City\", \"Population not from City\");\r\n\r\n\r\n        // Check populations is not empty\r\n        if (!populations.isEmpty())\r\n        {\r\n            // Loop over all cities in the list\r\n            for (Population population : populations) {\r\n                // Check population contain null\r\n                if (population == null){\r\n                    continue;}\r\n                String population_string =\r\n                        String.format(\"%-25s %-25s %-25s %-25s\",\r\n                                population.getName(), population.getTotalpopulation(), population.getCitypopulation(), population.getNotcitypopulation());\r\n\r\n                System.out.println(population_string);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            String population_string = \"Population Report List is empty\";\r\n            System.out.println(population_string);\r\n        }\r\n    }\r\n    public void printLanguageReport(ArrayList<Language> language)\r\n    {\r\n        // Check data is not null\r\n        if (language == null)\r\n        {\r\n            System.out.println(\"No Data\");\r\n            return;\r\n        }\r\n        // Print header\r\n        System.out.printf(\"%-30s %-30s %-30s%n\\n\",\"Language\",\"Population\",\"Percentage\");\r\n\r\n\r\n        // Check Country is not empty\r\n        if (!language.isEmpty())\r\n        {\r\n            // Loop over all countries in the list\r\n            for (Language langu : language)\r\n            {\r\n                // Check Country contain null\r\n                if (langu == null){\r\n                    continue;}\r\n                String lan_string =\r\n                        String.format(\"%-30s %-30s %-30s%n\",\r\n                                langu.getName(),langu.getPopulation(),String.format(\"%.2f%%\", langu.getPercentage()));\r\n                System.out.println(lan_string);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            String country_string = \"Country Report List is empty\";\r\n            System.out.println(country_string);\r\n        }\r\n    }\r\n\r\n}\r\n/// Output and Print Language\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/napier/sem/App.java b/src/main/java/com/napier/sem/App.java
--- a/src/main/java/com/napier/sem/App.java	(revision 38e4b67ec000a2ddb4cc57ef70d019bd3da9ed9a)
+++ b/src/main/java/com/napier/sem/App.java	(date 1672943456843)
@@ -781,7 +781,7 @@
                 actiy.setPopulation(result.getInt("city.Population"));
                 cities.add(actiy);
             }
-            System.out.println("\12. The top " + limit + " populated cities in the world. \n");
+            System.out.println("\n12. The top " + limit + " populated cities in the world. \n");
             return cities;
         }
         catch (Exception e)
